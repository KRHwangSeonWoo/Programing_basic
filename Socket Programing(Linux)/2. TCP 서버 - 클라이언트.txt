2. TCP 서버 - 클라이언트


1. TCP 서버 - 클라이언트 핵심 동작 과정

1) 서버는 클라이언트가 접속하기를 기다림 (listen)
2) 클라이언트는 서버에 접속 (connect)하고, 서버는 이 접속을 수용함 (accept
3) 클라이언트는 서버에 데이터를 보내고 (send), 서버는 클라이언트가 보낸 데이터를 받아 처리함 (recv)
4) 서버는 처리한 데이터를 클라이언트에 보냄 (send)
5) 클라이언트는 서버가 보낸 데이터를 받아 처리함 (recv)
6) 데이터를 주고 받는 과정을 모두 마치면 접속을 끊음 (close)


2. TCP 서버 - 클라이언트 자세한 동작 원리

* 핵심 *
TCP 서버는 세션을 맺는 소켓따로 세션을 맺고 나서 클라이언트와 실질적인 데이터 통신을 하는 소켓 따로 있다.
소켓하나당 포트하나를 할당하는 것이 아니다. 하나의 포트안에 여러개의 논리적인 소켓을 할당할 수 있다.

1) 서버는 소켓을 생성한 후 클라이언트가 접속하기를 기다린다.
또한 서버가 사용하는 소켓은 특정 포트와 결합되어 있어 이 포트 번호로 접속하는 클라이언트만 수용할 수 있다.
2) 클라이언트가 서버에 접속한다. 이때 3 way 이후 패킷 교환이 일어난다.
3) 3 way 이후 서버는 접속한 클라이언트와 통신할 수 있는 새로운 소켓을 생성한다.
이 소켓을 이용하여 서버와 클라이언트는 데이터를 주고 받는다.
기존 소켓은 새로운 클라이언트 접속을 수용하는데 계속 사용한다.
4) 두 클라이언트가 접속할 경우, 서버에는 총 3개의 소켓이 생성된다. 2 소켓은 클라이언트와 통신할 때의 소켓이고
나머지 하나는 새로운 클라이언트와 TCP 3 way를 하기 위한 소켓이다.







3. TCP 서버 - 클라이언트 구현

서버(에코 서버): 클라이언트가 보낸 데이터를 받아서 (recv) 이를 문자열로 간주하여 화면에 출력한다 (print).
그런 다음 받은 데이터를 변경 없이 다시 클라이언트에 보낸다. (send)

클라이언트(에코 클라이언트): 사용자가 입력한 문자열을 서버에 보낸다 (send). 서버가 데이터를 그대로 돌려 보내면 이를 그대로 받아서 (recv) 화면에 출력한다. (printf)


[서버 코드]
##############################################################################################################
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//공통 코드
#include <sys/types.h> // basic type definitions
#include <sys/socket.h> // socket(), AF_INET, ...
#include <arpa/inet.h> // htons(), htonl(), ...
#include <netdb.h> // gethostbyname(), ...
#include <unistd.h> // close(), ...
#include <fcntl.h> // fcntl(), ...
#include <pthread.h> // pthread_create(), ...
#include <poll.h> // poll()
#include <sys/epoll.h> // epoll()

#include <stdio.h> // printf(), ...
#include <stdlib.h> // exit(), ...
#include <string.h> // strerror(), ...
#include <errno.h> // errno

// Windows 소켓 코드와 호환성을 위한 정의
typedef int SOCKET;
#define SOCKET_ERROR   -1
#define INVALID_SOCKET -1

// 소켓 함수 오류 출력 후 종료
void err_quit(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
	exit(1);
}

// 소켓 함수 오류 출력
void err_display(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
}

// 소켓 함수 오류 출력
void err_display(int errcode)
{
	char* msgbuf = strerror(errcode);
	printf("[오류] %s\n", msgbuf);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define SERVERPORT 9000
#define BUFSIZE 512




////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(){
	//소켓 생성
int sock = socket(AF_INET, SOCK_STREAM, 0);
if (sock == INVALID_SOCKET) {
	err_display("sock");
}

//bind()
struct sockaddr_in serverAddr;
memset(&serverAddr, 0, sizeof(serverAddr));
//serverAddr에 할당된 크기만큼 0으로 초기화(모든데이터를 0으로 뒤집어 쓴다)
serverAddr.sin_family = AF_INET;
serverAddr.sin_port = htons(SERVERPORT);
serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
//INADDR_ANY는 0.0.0.0으로 모든 IP를 의미한다.

int retval = bind(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
//엥? 왜 2번째 인수 serverAdrr을 sockaddr로 형 변환하지?
//bind 함수에서는 const struct sockaddr *로 인자를 받기 때문에 형 변환해줘야 한다.
//엥? 근데 sockaddr과 sockaddr_in의 멤버가 다르잖아? 어떻게 해석할건데?
//형 변환을 할때 sockaddr과 sockaddr_in의 첫번째 멤버는 각각 sa_family와 sin_family이다.
//struct sockaddr_in은 struct sockaddr의 첫 멤버들이 동일하게 배열되어 있어서 호환이 가능하다.
//sockaddr_in의 첫 멤버인 sin_family는 sockaddr의 sa_family와 동일한 위치에 있고, 
// 따라서 캐스팅을 통해 두 구조체는 같은 메모리 레이아웃을 공유하게 된다.
//그렇기에 아래와 같이 IP 주소 체계에 따라 다르게 로직을 수행한다.
/*
	int bind(int sockfd, const struct sockaddr* addr, socklen_t addrlen) {
		// 내부적으로는 addr->sa_family 값을 보고 어떤 주소 체계인지 확인
		// addr->sa_family가 AF_INET이면, addr을 struct sockaddr_in으로 간주하고 처리
		if (addr->sa_family == AF_INET) {
			// IPv4 주소 체계 처리
			const struct sockaddr_in* addr_in = (const struct sockaddr_in*)addr;
			// addr_in을 사용하여 소켓을 바인딩
		}
		else if (addr->sa_family == AF_INET6) {
			// IPv6 주소 체계 처리
			const struct sockaddr_in6* addr_in6 = (const struct sockaddr_in6*)addr;
			// addr_in6을 사용하여 소켓을 바인딩
		}
		// 다른 주소 체계 처리 ...
	}
*/
//SOMAXCONN은 백로그 큐의 길이이다. 최대는 SOMACCONN으로 4096이다.
retval = listen(sock, SOMAXCONN);
if (retval == SOCKET_ERROR) {
	err_quit("bind()");
}


//데이터 통신에 사용할 변수
int clientSock;
struct sockaddr_in clientAddr;
socklen_t addrlen;
char buf[BUFSIZE];

while (1) {
	addrlen = sizeof(clientAddr);
	clientSock = accept(sock, (struct sockaddr*)&clientAddr, &addrlen);

	if (clientSock == INVALID_SOCKET) {
		err_display("accept()");
		break;
	}

	//접속한 클라이언트 정보 출력
	char addr[INET_ADDRSTRLEN];
	inet_ntop(AF_INET, &clientAddr.sin_addr, addr, sizeof(addr));
	printf("\n[TCP 서버] 클라이언트 접속: IP 주소=%s, 포트 번호=%d\n", addr, ntohs(clientAddr.sin_port));

	//클라이언트와 데이터 통신
	while (1) {
		//데이터 받기
		retval = recv(clientSock, buf, BUFSIZE - 1, 0);
		printf("%d", retval);
		if (retval == SOCKET_ERROR) {
			err_display("recv()");
			break;
		}
		else if (retval == 0) break;

		buf[retval] = '\0';
		printf("%s", buf);

		//데이터 보내기
		retval = send(clientSock, buf, retval, 0);
		if (retval == SOCKET_ERROR) {
			err_display("send()");
			break;
		}

	}

	close(clientSock);

}

close(sock);
}

##############################################################################################################





[클라이언트 코드]
[최대 512 바이트씩 전달하는 프로그램]
##############################################################################################################
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//공통 코드
#include <sys/types.h> // basic type definitions
#include <sys/socket.h> // socket(), AF_INET, ...
#include <arpa/inet.h> // htons(), htonl(), ...
#include <netdb.h> // gethostbyname(), ...
#include <unistd.h> // close(), ...
#include <fcntl.h> // fcntl(), ...
#include <pthread.h> // pthread_create(), ...
#include <poll.h> // poll()
#include <sys/epoll.h> // epoll()

#include <stdio.h> // printf(), ...
#include <stdlib.h> // exit(), ...
#include <string.h> // strerror(), ...
#include <errno.h> // errno

// Windows 소켓 코드와 호환성을 위한 정의
typedef int SOCKET;
#define SOCKET_ERROR   -1
#define INVALID_SOCKET -1

// 소켓 함수 오류 출력 후 종료
void err_quit(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
	exit(1);
}

// 소켓 함수 오류 출력
void err_display(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
}

// 소켓 함수 오류 출력
void err_display(int errcode)
{
	char* msgbuf = strerror(errcode);
	printf("[오류] %s\n", msgbuf);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* SERVERIP = "127.0.0.1";
#define SERVERPORT 9000
#define BUFSIZE 512


int main() {
	int retval;

	//소켓 생성
	SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == INVALID_SOCKET) err_quit("sock()");
	
	//connect()
	struct sockaddr_in serverAddr;
	memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	inet_pton(AF_INET, SERVERIP, &serverAddr.sin_addr);
	serverAddr.sin_port = htons(SERVERPORT);
	retval = connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if (retval == INVALID_SOCKET) err_quit("connect()");

	char buf[BUFSIZE + 1];
	int len;

	while (1) {
		printf("보낼 데이터\n");

		//엔터를 누르면서 줄바꿈까지 포함됨 예를 들어 a + enter => a + \n => buf의 크기를 구하면 2바이트 출력됨
		//fgets 특성상 마지막 문자열에 NULL을 추가함, 즉 buf[513](BUFSIZE + 1)에 반드시 NULL이 추가됨 (버퍼 사이즈를 513으로 지정했기 때문) 그렇기에 strlen을 이용하여 문자열의
		// 크기를 구할 때 최대가 512임, 만약 513바이트를 보낸다고하면 NULL 값자리인 마지막을 제외한 512만 읽어드림
		//그리고 다시 1바이트를 보냄
		if (fgets(buf, BUFSIZE + 1, stdin) == NULL) break;
		
		//a를 입력하면 \n까지 합쳐서 len의 값이 2가 됨, 
		len = strlen(buf);
		printf("%d\n", strlen(buf));
		
		//버퍼의 크기가 512 미만인경우, \n 문자가 추가되어 해당 문자를 NULL로 교체, 
		// 512 이상인 경우 \n 문자가 삽입되지 않아 NULL 값 넣음 (예를 들어 513바이트를 입력하고 엔터를 쳤다고 가정한다. 그럼 \n(엔터)까지 514바이트를 필요로한다.
		//하지만 fgets로 513까지만 저장하기에 마지막 \n은 포함되지 않아 삭제하지 않아도된다. (이미 fgets를 통해 \0이 추가되었겠지만 안정성을 위해 다시 추가)
		if (strlen(buf) == BUFSIZE) {
			buf[len] = '\0';
		}
		else {
			buf[len - 1] = '\0';
		}
		printf("테스트%d\n", strlen(buf));
		retval = send(sock, buf, strlen(buf), 0);
	
		
		
		if (retval == SOCKET_ERROR) {
			err_display("send");
			break;
		}

		printf("총 %d바이트를 보냈습니다.\n", retval);

		retval = recv(sock, buf, retval, MSG_WAITALL);
		printf("방금 %d바이트를 받았습니다..\n", retval);


		buf[retval] = '\0';
		printf("%s\n", buf);

		
	}
	close(sock);

}
##############################################################################################################








































4. TCP 서버 - 클라이언트 분석

*지역 IP/포트: local IP
*원격 IP/포트: 통신을 시도하는 상대의 주소





(1) TCP 서버 함수 분석

1) socket() : 소켓 생성하여 사용할 프로토콜을 결정 (IPv4, TCP, UDP...)
2) bind(): 소켓의 지역 IP 주소와 지역 포트 번호 결정
3) listen(): 소켓의 TCP 상태를 LISTENING으로 변경
4) accept(): 클라이언트 접속을 수용하고, 접속한 클라이언트와 통신할 수 있는 새로운 소켓을 생성한다.
이때 원격 IP 주소와 원격 포트가 결정됨
5) send(), recv() 함수: 클라이언트와 데이터 통신 수행
6) close(): 소켓 닫기
* 새로운 클라이언트 접속이 들어올 때마다 4~5 과정을 반복





1. socket, 소켓 생성 함수
소켓 생성시 해당 소켓을 나타내는 정수형 숫자를 소켓 디스크립터라고 부른다.

int socket(
int domain //주소 체계
int type //소켓 타입 지정
int protocol //사용할 프로토콜 지정
);

#인자값 분석
1) int domain: 주소 체계
IPV4 = AF_INET
IPV6 = AF_INET6

2) 소켓 타입
소켓의 타입을 가르킨다. 즉 연결형 프로토콜을 사용할 것인가 아님, 비연결형 프로토콜을 사용할 것인가를 결정한다.
연결형 프로토콜 (TCP, SCTP 등등..) = SOCK_STREAM 
비연결형 프로토콜 (UDP, DCCP 등등...) = SOCK_DGRAM

3) 프로토콜
프로토콜을 가르킨다, 즉 TCP, UDP 등과 같은 프로토콜 자체를 가르킨다.
UDP와 TCP 같은 경우는 소켓 타입으로만 넣어도 된다고 한다. 그래서 대개는 0을 넣는다고 한다.
TCP = IPPROTO_TCP
(TCP는 연결지향적으로 UDP와 다르게 3 way, 데이트를 수신 받으면 ack를 주는 등으로 안전하게 데이터를 송수신할 수 있으며 ack을 못 받은 경우 재전송할 수 있게 된다.)
UDP = IPPROTO_UDP




2. bind(), 소켓의 지역 IP 주소와 지역 포트를 결정하는 함수

int bind(
int sock, //클라이언트 접속을 수용하는 소켓 (TCP 세션을 맺는 소켓 지정)
const struct sockaddr * addr, //지역 IP 주소와 지역 포트를 초기화
socklen_t addrlen //소켓 주소 구조체의 길이, 2번째 인자로 소켓 구조체를 받는다. 여기서 소켓을 생성할 IP 주소 체계가 struct sockaddr_in인지(IPv4), struct sockaddr_in6(IPv6)인지 모른다.
그렇기에 안전하게 메모리를 할당하여 사용하기 위해서 (구조체 마다 할당되는 메모리 크기가 다르기에) 해당 구조체의 바이트 크기를 인자로 받는것이다.
)


//bind()
retval = bind(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr));//
//엥? 왜 2번째 인수 serverAdrr을 sockaddr로 형 변환하지?
//bind 함수에서는 const struct sockaddr *로 인자를 받기 때문에 형 변환해줘야 한다.
//엥? 근데 sockaddr과 sockaddr_in의 멤버가 다르잖아? 어떻게 해석할건데?
//형 변환을 할때 sockaddr과 sockaddr_in의 첫번째 멤버는 각각 sa_family와 sin_family이다.
//struct sockaddr_in은 struct sockaddr의 첫 멤버들이 동일하게 배열되어 있어서 호환이 가능하다.
//sockaddr_in의 첫 멤버인 sin_family는 sockaddr의 sa_family와 동일한 위치에 있고, 
// 따라서 캐스팅을 통해 두 구조체는 같은 메모리 레이아웃을 공유하게 된다.
//그렇기에 아래와 같이 IP 주소 체계에 따라 다르게 로직을 수행한다.
/*
	int bind(int sockfd, const struct sockaddr* addr, socklen_t addrlen) {
		// 내부적으로는 addr->sa_family 값을 보고 어떤 주소 체계인지 확인
		// addr->sa_family가 AF_INET이면, addr을 struct sockaddr_in으로 간주하고 처리
		if (addr->sa_family == AF_INET) {
			// IPv4 주소 체계 처리
			const struct sockaddr_in* addr_in = (const struct sockaddr_in*)addr;
			// addr_in을 사용하여 소켓을 바인딩
		}
		else if (addr->sa_family == AF_INET6) {
			// IPv6 주소 체계 처리
			const struct sockaddr_in6* addr_in6 = (const struct sockaddr_in6*)addr;
			// addr_in6을 사용하여 소켓을 바인딩
		}
		// 다른 주소 체계 처리 ...
	}
*/





3. listen(), TCP 상태를 listen으로 바꾸는 함수

int listen(
int sock, //클라이언트 접속을 수용하는 소켓으로 이전 bind 함수를 호출하여 지역 IP 주소와 지역 포트를 설정한 상태이다.
int backlog //클라이언트 접속 정보는 연결 큐에 저장되는데, 이를 backlog 큐라고 한다. 이 백로그 큐의 길이를 나타낸다. 최대값으로 설정하려면 SOMAXCONN으로 사용하면 된다.
)

//listen
retval = listen(sock, SOMAXCONN);







4. accept(), 클라이언트와 통신할 수 있는 새로운 소켓을 생성하여 return하는 함수

int accept(
int sock, //클라이언트의 접속을 수용하는 소켓
struct sockaddr * addr, //소켓 구조체를 전달하면 클라이언트 주소 정보가 채워짐 (IP, port)
socklen_t * addrlen //초기에 addr의 크기로 초기화된 인자를 넣어야 하며, accept함수 로직 중 addr 안에 클라이언트 정보가 채워진 바이트만큼 addrlen이 저장된다. 만약 클라이언트의 IP 주소와 포트 번호를 알 필요가 없다면 addr과 addrlen에 NULL값을 전달하면 됨,
)

접속한 클라이언트가 없을 경우 accpt() 함수는 대기 상태로 만들며 이때 서버의 CPU 사용률을 0%가 됨.
클라이언트가 접속하면 서버는 깨어나고 accept함수를 return함


//accept()
clientSock = accept(sock, (struct sockaddr *) &clientAddr, &addrlen);



5. send(), recv() 함수는 다른 장에서 배운다.














(2) TCP 클라이언트 함수 분석
1. socket(): 소켓을 생성함으로써 사용할 프로토콜을 결정한다.
2. connect(): 함수로 서버에 접속한다. 이때 원격 IP 주소와 원격 포트 번호는 물론, 지역 IP 주소와 지역 포트도 함께 결정된다.
3. send(), recv() 함수: 데이터 전송함수로 서버와 통신한다.
4. close(): 소켓을 닫는다.


1. socket(), 소켓을 생성 (서버와 동일)




2. connect(), TCP 프로토콜로 서버와 TCP 연결 수행

int connect(
int sock, //서버와 통신할 소켓
const struct sockaddr * addr, //서버의 주소 정보를 초기화해서 전달
int addrlen //소켓 주소 구조체의 길이
); 

*엥? TCP 서버와는 다르게 addrlen이 포인터 형이 아닌 int 형이네?

accept() 함수: 서버가 클라이언트의 동적인 주소 정보를 받아들여야 하기 때문에, socklen_t *addrlen을 사용하여 클라이언트의 주소 정보를 저장할 공간의 크기를 전달하고, 함수 호출 후에 실제로 저장된 주소 정보의 크기로 업데이트합니다.
connect() 함수: 클라이언트가 사전에 알고 있는 서버의 주소 정보를 사용하여 연결을 시도하기 때문에, socklen_t addrlen을 상수 값으로 전달하며, 함수 호출 후에 업데이트할 필요가 없습니다.

*일반적으로 서버와는 달리 클라이언트는 bind()를 호출하지 않는다. connect() 함수를 호출하면 OS가 자동적으로 지역 IP, port를 할당해준다.

//connect()
retval = connect(sock, (struct sockaddr * )&serverAddr, sizeof(serverAddr));












(3) TCP 데이터 전송 함수
데이터 전송함수는 데이터를 보내는 함수와 데이터를 받는 함수로 구분할 수 있다.
가장 기본이되는 함수는 send(), recv() 함수가 있다. (UDP에서는 sendto(), recvfrom() 함수 존재)


*송수신할 때 버퍼를 이용하여 데이터를 전송한다. 이때 송신 버퍼, 수신 버퍼를 소켓 버퍼라고 부른다.
송신 버퍼: 데이터를 전송하기 전에 임시로 저장해두는 영역
수신 버퍼: 받은 데이터를 응용 프로그램이 읽어가기 전에 임시로 저장해두는 영역

통신 프로토콜 마다 데이터 전송에 대한 로직이 다르다.
TCP인 경우 응용 프로그램이 보낸 데이터의 경계를 구분하지 못한다는 특징이 있다.

예를 들어 클라이언트가 100, 200, 300 바이트를 차례대로 보낼 경우 서버는 클라이언트의 데이터의 경계를 구분하지 못하고 250, 350 바이트 데이터를 읽을 수 있다.
그렇기에 TCP에서는 서버 - 클라이언트 간의 데이터 경계 구분 상호 약속이 필요하며, 이를 응용 프로그램 수준에서 처리해야 한다.



1. send(), 데이터 송신 함수

int send(
int sock, //통신할 대상과 연결된 소켓
const void * buf, //보낼 데이터를 담고 있는 응용 프로그램의 버퍼의 주소
size_t len, //보낼 데이터의 크기
int flags //send() 함수의 동작을 바꾸는 옵션으로 거의 항상 0을 사용
);

#return
*send() 함수는 첫 번째 인수로 전달하는 소켓의 특성에 따라 다음과 같이 두 종류의 다른 리턴을 할 수 있다.
1) 블로킹 소켓: 위 본문 예제는 모두 블로킹 소켓임, 소켓 송신 버퍼의 여유 공간이 3번째 인수인 len보다 적을 경우 프로세스는 대기 상태로 바뀌고
버퍼의 여유 공간이 len보다 많은 경우 다시 프로세스가 깨엇나서 len 크기만큼 데이터 복사가 일어난 후 send() 함수를 return한다.
-> 이 경우 send()의 return 값은 len과 같다.

2) 넌블로킹 소켓: 넌블로킹 소켓을 대상으로 send() 함수를 호출하면 소켓 송신 버퍼의 여유 공간만큼 데이터를 복사한 후 실제 복사한 데이터를 return한다.
-> 이 경우 send()의 return 값은 1(최소) ~ len(최대)이다.




2. recv(), 데이터 수신 함수

int recv(
int sock, //통신할 대상과 연결된 소켓
void *buf, //받은 데이터를 저장할 응용 프로그램 주소
size_t len, //운영체제의 수신버퍼로부터복사할 최대 데이터 크기, 이값은 buf가 가르키는 응용 프로그램 버퍼보다 크면 안됨.
int flags // recv() 함수의 동작을 바꾸는 옵션이다.
)

*flags의 종류

0) 기본 동작: recv() 함수의 기본동작은 수신 버퍼에 도착한 데이터가 len 크기 미만이더라도 len만큼 수신 버퍼에 데이터를 도착하는 것을 기다리지 않고 현재 있는 만큼 데이터를 복사하고 리턴한다.
또한 수신 버퍼의 데이터를 응용 프로그램 버퍼에 복사하는데, 이때 해당 데이터를 수신 버퍼에서 삭제한다.

1) MSG_PEEK: recv() 함수의 기본 동작은 수신 버퍼의 데이터를 응용 프로그램 버퍼에 복사하는데, 이때 해당 데이터를 수신 버퍼에서 삭제하는 것이 일반적이다.
하지만 MSG_PEEK 옵션을 사용하면 수신 퍼버에 데이터가 계속 남는다.

2) WAITALL: 이 옵션을 사용하게되면 len 크기만큼 데이터가 수신 버퍼에 도착해서 으용 프로그램 버퍼에 복사할때까지 기다린다.
=> 받을 데이터의 크기를 미리 알고있으면 WAITALL 옵션을 사용하는 것이 좋다.
=> 그렇기에 위 예제에서 서버에서 클라이언트의 데이터를 받을 때 recv flag가 0,
=> 클라이언트는 자기가 보낸 데이터만큼 데이터를 받을 것이기에 받을 데이터의 크기를 알고있어 flag가 WAITALL이다.
단, TCP 연결이 종료될때는 len만큼 데이터를 받지 못하더라도 전달 받은 데이터를 응용 프로그램 버퍼에 복사하고 return한다.


#return
1) 수신 버퍼에 데이터가 도달한 경우: recv() 함수의 세번쨰 인수인 len보다 크지 않은 범위에서 데이터를 응용 프로그램에 최대한 복사한후 실제 복사한 데이터 수를 return 한다.
이경우 recv() 함수의 리턴 값은 최소 1, 최대 len이다.

2) 접속을 정상 종료한 경우: close를 통해 접속을 종료할 때 접속 종료를 위한 패킷 교환 절차가 일어난다. 이때 recv() 함수는 0을 return한다.
TCP 종료를 나타내는 4 handshake (3 hand도 있음) = FIN, ACK, FIN, ACK(FIN), FIN/ACK, ACK도 send와 recv 함수로 구현해야 하는 것 같다. (위 예제는 이 과정이 생략되어있는듯)













































5. IPv6에서의 TCP 서버 - 클라이언트 통신
*IPv4와 IPv6를 동시에 지원하는데 필요한 기술은 "멀티스레드"에서 배우고 마지막 예제에서 구현한다.


