3. 파일 입출력

#파일은 크게 일반 파일과 특수 파일로 구분됨.
일반 파일: 텍스트나 바이너리 형태의 자료를 저장하는 파일
특수 파일: 데이터 전송 또는 장치 접근에 사용하는 파일

#파일을 읽고 쓰는 방법은 저수준 파일과 고수준 파일 입출력으로 구분됨.
1. 저수준 파일: 리눅스 커널 의 시스템 호출을 이용해 입출력 수행(바이트 단위)
[특징]
빠름
파일 기술자(파일 스크립터)를 사용
특수 파일에 대한 접근 가능
[단점]
바이트 단위로 입출력을 수행하므로 이를 이용해 응용 프로그램을 작성하려면 바이트를 적당한 형태의 데이터로 변환하는 여러 가지 기능을 함수로 추가 구현해야 하는 단점이 있음.


2. 고수준 파일: C 언어의 표준 함수로 제공(버퍼 단위)
[특징]
파일 포인터를 사용
데이터를 바이트 단위로 한정하지 않아 한번에 읽기와 쓰기를 수행함.
다양한 입출력 데이터 변환 기능도 이미 구현되어 있어 자료형에 따라 편리하게 이용가능
[단점]
느림  











                        
(1) 저수준 파일 입출력
모든 저수준 파일 입출력 함수는 파일 기술자를 사용함.
파일 기술자는 파일을 구분할 목적으로 시스템에서 붙여놓은 번호임. 해당 번호를 통해 파일을 컨트롤함.

[파일 기술자]
0: 표준 입력
1: 표준 출력
2: 표준 오류 출력
3: 3부터 순서 대로 할당함


1. 파일 생성과 닫기

[flags]
O_RDONLY
읽기 전용으로 열기
O_WRONLY
쓰기 전용으로 열기
O_RDWR
일기/쓰기 전용으로 열기
O_CREAT
해당 파일이 없으면 파일 생성
O_EXCL
해당파일 있으면 에러 발생, 파일 열지 않음
O_TRUNC
해당 파일 존재 하면 파일 내용 모두 지움
O_APPEND
쓰기 동작 시 파일에 끝에 추가됨
O_NOCTTY
첫 인수 pathname이 터미널이면 이 터미널을 프로그램의 제어 터미널로 할당하지 않음
O_NONBLOCK
FIFO, 블록 특수파일, 문자 특수파일 등에서 입출력을 할 경우 읽거나 쓸 내용이 없더라도 장치가 준비, 사용 가능 하게 되는 것을 기다리지 않고 -1 반환
O_SYNC
쓰기 동작시 물리적인 쓰기 동작 완료될 때까지 기다림.




1) open() 파일 열기
int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode); -> O_CREAT 플래그를 사용할 경우 파일의 권한 설정 가능
################################################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    //쓰기 전용으로 열 떄 (이미 파일이 있을 경우)
    open("hi.txt", O_TRUNC);

    //생성 후 쓰기 전용으로 열기 (파일이 없을 경우)
    open("hi.txt", O_WRONLY | O_CREAT);

    //파일이 없을 경우 생성 후 쓰기 전용으로 열기, 권한 644 부여
    open("hi_test.txt", O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);


}
[root@localhost ~]# ./a.out 
[root@localhost ~]# ls -al | grep hi_test.txt 
-rw-r--r--.  1 root root     0 Nov  1 19:43 hi_test.txt
################################################################################################################









2) create() 파일 생성
open 함수에 파일 생성 긴응이 없던 구 버전 유닉스에서 사용된 것임.
int creat(const char *pathname, mode_t mode);







3) 파일 닫기: close()
int close(int fd);
파일 입출력 작업을 완료하면 반드시 파일을 닫아야 한다. 한 프로세스가 열수 있는 파일 개수에 제한이 있기에 파일을 제대로 닫지 
않으면 최대 허용 개수를 초과해 더 이상 파일을 열지 못할 수 있다. (ulimit -n 명령어로 확인가능)

close 함수는 성공 시 0, 실패 시 -1 return함
 
########################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    //쓰기 전용으로 열 떄 (이미 파일이 있을 경우)
    int fd = open("hi.txt", O_TRUNC);

    //O_EXCL은 생성할 파일이 이미 존재하면 오류를 낸다. 
    int fd2 = open("hi2.txt", O_CREAT | O_EXCL, 0644);
    if (fd2 == -1){
        perror("EXCL");
    }
    close(fd);
    close(fd2);

        

}

[root@localhost ~]# ./a.out 
[root@localhost ~]# ls -l | grep test2.c
-rw-r--r--. 1 root root   90 Oct 18 00:02 test2.c
[root@localhost ~]# ./a.out 
EXCL: File exists
##############################################################################################################





















2. 파일 읽기와 쓰기




1) 읽기, read()
size_t read(int fd, void *buf, size_t count);
size_t는 sys/types.h 파일에 int로 정의됨. (환경에 따라 long으로도 될 수 있음)
count에서 지정한 크기 만큼 바이트 단위로 파일을 읽으며 buf에 저장한다.
또한 read() 함수를 실행하면 읽은 크기만큼 오프셋이 이동하게 된다.
즉 다시 read해서 읽는다면 이전의 오프셋이 옮겨진 지점 이후부터 읽는다.
reutrun 0 -> 파일 끝까지 읽어서 더이상 읽을 것이 없을 때
return -1 -> 오류
return > 0 -> 읽어들인 바이트 수



[8바이트 문자 버퍼에 파일의 문자열(8바이트)를 읽어서 버퍼에 저장 -> 정상적으로 읽어들이지만 buf의 크기를 1byte 더 키워야 함 -> 잘못된 습관임]

C 언어에서 문자열을 선언할 때, 문자열의 길이를 지정해야 합니다. char hi[4] = "hie";와 같은 코드는 문자열을 저장하는 데는 적절하지만, 문자열의 길이를 설정하는 부분이 잘못되었습니다.
문자열 "hie"에는 3개의 문자가 포함되므로 배열의 크기를 적어도 4로 설정해야 합니다. 이것은 문자열 자체와 종결 문자 '\0'을 저장하기 위해 필요합니다. 따라서 올바른 방법은 다음과 같습니다:

char hi[4] = "hie";
또는, 문자열의 길이를 자동으로 계산하도록 배열 크기를 설정하려면 다음과 같이 작성할 수 있습니다:

char hi[] = "hie";
두 번째 옵션은 배열 크기를 자동으로 설정하여 코드를 더 유연하게 만듭니다.

####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int fd = open("hi.txt", O_RDONLY);
    char buf[8];
    if (fd == -1){
        perror("Open");
        exit(1);
    }
    
    int n = read(fd, buf, 8);
         printf("%d\n",n);
    if (n == -1){
   
        perror("Read");
        exit(1);
    }

    //buf[n] ='\0';
    printf("%s\n", buf);
    close(fd);
}
[root@localhost ~]# cat hi.txt 
12345678901234567890123
[root@localhost ~]# ./a.out
8
12345678
####################################################################################


[9바이트 문자 버퍼에 파일의 문자열(8바이트)를 읽어서 버퍼에 저장 -> NULL 문자가 없어 이상한 문자가 삽입됨]
####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int fd = open("hi.txt", O_RDONLY);
    char buf[9];
    if (fd == -1){
        perror("Open");
        exit(1);
    }
    
    int n = read(fd, buf, 8);
    if (n == -1){
        perror("Read");
        exit(1);
    }

    //buf[n] ='\0';
    printf("%s\n", buf);
    close(fd);
}
[root@localhost ~]# cat hi.txt 
ABCDEFGH
[root@localhost ~]# ./a.out 
ABCDEFGH�@
####################################################################################

[정석]
####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int fd = open("hi.txt", O_RDONLY);
    char buf[9];
    if (fd == -1){
        perror("Open");
        exit(1);
    }
    
    int n = read(fd, buf, 8);
    if (n == -1){
        perror("Read");
        exit(1);
    }

    buf[n] ='\0';
    printf("%s\n", buf);
    close(fd);
}
[root@localhost ~]# cat hi.txt 
ABCDEFGH
[root@localhost ~]# ./a.out 
ABCDEFGH
####################################################################################




2) 파일 쓰기, write()
ssize_t write(int fd, const void *buf, size_t count);
fd가 가르키는 파일에 기록할 데이터 buf를 count로 지정한 크기만큼 읽어 파일에 쓰기를 수행함.
실제 쓰기를 수행한 바이트 수를 return하고 오류가 발생하면 -1 return

A 파일 복사하여 B에 붙여넣기
####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int fd_read, fd_write, n;
    char buf[10];
    fd_read = open("hi.txt", O_RDONLY);
    fd_write = open("bye.txt", O_CREAT | O_RDWR);
    

    while ((n = read(fd_read, buf, 10)) > 0){
        if(write(fd_write, buf, n)){
            perror("Write:");
            printf("%d\n",n);

        }
    }

}
[root@localhost ~]# cat hi.txt 
12345678901234567890123
[root@localhost ~]# ./a.out 
10
Write:: Success
10
Write:: Success
4
Write:: Success
[root@localhost ~]# cat bye.txt 
12345678901234567890123
####################################################################################







3. 파일 오프셋 지정
파일의 내용을 읽거나 쓰면 오프셋이 자동으로 변경되는데, 오프셋은 파일의 시작 지점에서 현재 위치까지의 바이트 수를 의미한다.
처음 파일을 열고 읽으면 오프셋이 0이지만 read() 함수를 또 다시 호출하여 읽게되면 해당 오프셋이 전에 읽은 후의 위치부터 시작하게 된다.
write 함수도 마찬가지이다.
그렇기에 만약 offset을 초기화하고 싶다면 lseek() 함수를 이용하면 된다.

off_t lseek(int fd, off_t offset, int whence);
#fd -> 파일 디스크립터
#offset: 이동할 오프셋 위치
#whence: 오프셋의 기준 위치
- SEEK_SET: 파일의 시작을 기준
- SEEK_CUR: 파일의 현재 위치를 기준
- SEEK_END: 파일의 끝을 기준

성공하면 새로운 오프셋을 return, 실패하면 -1 return


예)
#파일의 시작에서 다섯 번째 위치로 이동
lseek(fd, 5, SEEK_SET);
#파일의 끝에서 0번째이므로 파일 끝으로 이동
lseek(fd, 0, SEEK_END);
#파일 오프셋의 현재 위치
lseek(fd, 0, SEEK_CUR);


[파일의 용량대로 malloc으로 할당하고 출력하는 예제]
####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int fd = open("hi.txt",O_RDONLY);
    int end = lseek(fd, 0, SEEK_END);
    lseek(fd, 0, SEEK_SET);

    char * file_content = (char *) malloc(end + 1);

    read(fd, file_content, end);
    file_content[end+1] ='\0';
    printf("%s", file_content);
    free(file_content);
}

[root@localhost ~]# cat hi.txt 
hellow i'm hwangseonwoo end
[root@localhost ~]# ./a.out
hellow i'm hwangseonwoo end
####################################################################################




4. 파일 기술자 복사, dup()
dup 함수는 기존 파일 기술자를 인자로 받아 새로운 파일 기술자를 return한다.
####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int old_fd = open("hi.txt", O_RDONLY);
    int new_fd = dup(old_fd);

    printf("%d\n", old_fd);
    printf("%d", new_fd);
}
[root@localhost ~]# ./a.out
3
4
####################################################################################


dup2(int oldfd, int newfd);
파일 기술자를 원하는 숫자로 할당이 가능하다.
####################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/stat.h>

int main() {
    int old_fd = open("hi.txt", O_RDONLY);
    int new_fd = dup2(old_fd, 10);

    printf("%d\n", old_fd);
    printf("%d", new_fd);
}
[root@localhost ~]# ./a.out 
3
10
####################################################################################



5. 파일 기술자 제어
open된 파일의 flags 추가

읽기, 쓰기, 읽기/쓰기 모드:
O_RDONLY: 파일을 읽기 전용으로 엽니다.
O_WRONLY: 파일을 쓰기 전용으로 엽니다.
O_RDWR: 파일을 읽기 및 쓰기 모드로 엽니다.

파일 옵션 [플래그]:
O_APPEND: 파일을 열 때마다 파일 끝에 추가하여 쓰기 작업을 수행합니다.
O_CREAT: 파일이 없으면 새로운 파일을 생성합니다.
O_EXCL: 파일이 이미 존재하는 경우 에러를 발생시킵니다.
O_TRUNC: 파일을 열 때 내용을 삭제하고 비웁니다.
####################################################################################
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>

int main() {

int fd1 = open("hi.txt", O_RDWR);
write(fd1, "abcd", 4);
close(fd1);

int fd2 = open("hi.txt", O_RDWR);

int flags = fcntl(fd2, F_GETFL);
flags |= O_APPEND;

fcntl(fd2, F_SETFL, flags);
write(fd2, "abcd", 4);

close(fd2);

}
[root@localhost ~]# cat hi.txt 
12345678901234567890
[root@localhost ~]# ./a.out 
[root@localhost ~]# cat hi.txt 
abcd5678901234567890
abcd
####################################################################################



6. 파일 삭제, remove()
int remove(const char *pathname)
remove함수는 내부 적으로 삭제할 대상이 파일이면 unlink() 함수를 호출하고, 디렉토리이면 rmdir() 함수를 호출한다.

####################################################################################
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>

int main() {

if(remove("hi.txt") == 1){
    printf("hi.txt remove success!");
}

}
[root@localhost ~]# touch hi.txt
[root@localhost ~]# ./a.out 
hi.txt remove success!
[root@localhost ~]# ls | grep hi.txt
####################################################################################





7. 파일과 디스크 동기화 함수

int fsync(int fd);
fsync 함수는 파일의 내용을 디스크로 보내 메모리와 디스크의 내용을 동기화함
fsync() 함수는 메모리의 내용이 디스크로 모두 기록되기 전에 리턴하지 않는다.

