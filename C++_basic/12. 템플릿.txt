12. 템플릿 1









1.  함수 템플릿이란
매개변수와 return 등을 특정 자료형을 적시하지 않은 함수
-> 호출 시 자료형을 기재해야 한다.

***typename와 class 둘중 하나 사용하면 됨
##########################################
int add(int num1, int num2){
return num1 + num2;
}

->

template <typename T>
T Add(T num1, T num2){
return num1 + num2;
}
##########################################



[예제]
##########################################
#include<iostream>

template <typename T>
T Add(T num1, T num2) {
	return num1 + num2;
}

void main() {
	std::cout << Add<int>(20, 30.3);
	std::cout << Add<float>(20, 30.3);
	//50
	//50.3
}
##########################################


[Type을 명시하지 않은 경우, 컴파일러가 자동으로 형을 판단]
- 인자 TYPE 2개를 T로 선언하고 인자 두개가 일치하지 않을 경우 error 발생
##########################################
#include<iostream>

template <typename T>
T Add(T num1, T num2) {
	return num1 + num2;
}

void main() {
	std::cout << Add(29.5, 30.3);
	//std::cout << Add(29, 30.3); -> error

}
##########################################





2. 함수 템플릿과 템플릿함수

1) 함수 템플릿
앞서 보인 정의를 함수 템플릿이라고 한다.
***************************************
template <typename T>
T Add(T num1, T num2){
return num1 + num2
}
***************************************


2) 템플릿 함수
함수 템플릿으로 컴파일러가 만들어 내는 다음 유형의 함수를 템플릿함수라고 한다.

***************************************
template <typename T>
T Add(T num1, T num2){
return num1 + num2
}

void main(){

Add<int>(10,30);
Add(10.1,30.3);
}
***************************************

-> 실행 시 컴파일러가 만들어낸 함수

**************************************
int Add<int> (int num1, int num2){
return num1 + num2
}

float Add<float> (float num1, float num2){
return num1 + num2
}
**************************************





3. 둘 이상의 템플릿
아래와 같이 둘이 이상의 자료 템플릿을 선언하여 사용이 가능하다.
##########################################
#include<iostream>

template <typename T1, typename T2>
T2 Add(T1 num1, T2 num2) {
	return num1 + num2;
}

void main() {
	std::cout << Add(29, 30.3);
	std::cout << Add(29.3, 30);

	std::cout << Add<int, float>(29, 30.3);

}
##########################################










4. 함수 템플릿의 특수화
자료형에 따라서 로직이 달라지기에 특정 자료형이 올 경우, 다른 로직을 수행해야한다.
ex) 두 개의 자료형을 더하는 로직을 짜려하는데 int인 경우 가능하지만 char *인 경우 단순히 +를 사용해서는 안된다.
즉 char * 인 경우 따로 그 자료형에 맞는 로직을 정의해야 한다.
int + int (0)
char * + char * (X)

****************************
template<>
int Add(char* a, char* b) {
    strcat_s(a, 11, b);
    return 1;

}
-> 해당 특수화된 함수 템플릿을 만들기 위해서는 아래의 조건을 충족해야한다.
1) 함수 템플릿중 return이 int인 경우
2) 특수화 함수 템플릿의 매개변수가 함수 템플릿에 대입했을 때 문제가 없어야함
- 매개변수 2개의 T를 받는 함수 템플릿이면, 특수화 템플릿에서는 매개변수가 동일한 타입으로 받아야함
- 매개변수 2개 중 하나만 T를 받는 함수 템플릿이면, 특수화에서는 나머지 매개변수 타입이 일치해야함

#또한 호출 시 Add(a, b) or Add<char *>(a,b) 식으로 호출이 가능하다.
전자는 컴파일러가 자동적으로 T의 자료형을 인식하는 거고, 후자는 프로그래머가 명시적으로 T의 자료형을 알려주는 것이다.
****************************


####################################################################################
#include<iostream>
#include<cstring> 

/*
template <typename T>
T Add(T num1, T num2) {
    return num1 + num2;
}
//2개의 매개변수가 동일한 경우 호출됨

*/


template <typename T>
int Add(T num1, T num2) {
    return num1 + num2;
}
//2개의 매개변수가 동일한 경우 호출됨



template<>
int Add(char* a,  char* b) {
    strcat_s(a, 11, b);
    return 1;

}
//2개의 매개변수가 char *일 경우에 호출됨
//또한 위에 int Add(T num1, T num2)가 정의되지 않을 경우 에러가 발생함
//특수화 함수 템플릿은 기본 함수 템플릿에 정의된 형태와 동일해야함 (return 값, 매개변수 자료형(만약에 매개변수 2개가 T인 경우, 두 매개변수는 동일해야함))


int main() {
    char a[11] = "hello";
    char b[11] = "world";

    std::cout << Add<char *>(a, b) << std::endl;
    std::cout << Add(a, b) << std::endl;
    return 0;
}
####################################################################################









5. 클래스 템플릿
클래스 내에 사용할 변수를 템플릿으로 정의가 가능하다.
이 또한 우리가 정의한 템플릿을 "클래스 템플릿", 컴파일러가 정의한 템플릿을 "클래스 템플릿"이라고 함

*** 위 함수 템플릿과는 다르게 클래스 템플릿 사용 시 반드시 타입을 정의해줘야 한다.
####################################################################################
#include <iostream>

template <typename T>
class Test {
private:
    T member;

public:
    Test(T member) : member(member) {
    }

    void showTestData() {
        std::cout << member;
    }
};

int main() {
    Test<int> a(3);
    a.showTestData();
    //3
    Test<float> b(3.14f);
    b.showTestData();
    //3.14

    return 0;
}
####################################################################################









6. 클래스 템플릿의 선언과 정의 분리
클래스 템플릿의 선언과 정의를 분리 시킬 수 있다.

*정의 시 아래와 같은 패턴을 따른다.
*************************************************************
template<typename T>
Test<T>::Test(T member) : member(member) {
	std::cout << "Test -> T의 생성자";
}
*************************************************************
1) template<typename T>: 템플릿을 T로 사용할 것이다!
2) Test<T>: 위 T에 대해 템플릿화된 Test 클래스 템플릿

위 두개를 꼭! 써줘야 한다!

####################################################################################
#include<iostream>

template<typename T>
class Test {
	T member;

public:
	Test(T member);
};

/*
template<typename C>
Test<C>::Test(C member) : member(member){
	std::cout << "Test -> T의 생성자";
} -> 이렇게 해도 상관없음
어차피 
*/

template<typename T>
Test<T>::Test(T member) : member(member) {
	std::cout << "Test -> T의 생성자";
}
int main() {

	Test<int> t1(10);

}
####################################################################################








7. 템플릿 파일 분할 시 주의 사항

일반적으로 템플릿이 없는 코드의 파일 분할은 헤더와 소스를 분리하고, main에서는 헤더를 include하면 되지만
템플릿인 경우 소스를 include해야 한다.

왜냐하면 예를 들어 클래스 탬플릿인 경우, main 함수에 2개의 객체를 생성한다고 가정하자.

Point<int> p1(3,4);
Point<double> p1(3.14,4.5);

->  컴파일러는 main 함수에 명시된 자료형,  총 2개의 템플릿 클래스를 생성해야 한다.
즉, 컴파일러는 클래스 템플릿 (Point 클래스)의 소스를 알고있어야 한다. (해당 소스를 지정한 자료형의 클래스를 생성해야 하니깐)
그렇기에 컴파일러가 클래스 템플릿을 확인하기 위해 main에서 CPP(소스 파일)을 include해줘야 한다. 


####################################################################################
//Point.h 
#ifndef POINT_H
#define POINT_H

template<typename T>
class Point {
private:
    T x, y;

public:
    Point(T x, T y);
};

#endif
--------------------------------------------------------------------------------------------------------------------------
//FileName.cpp
#include<iostream>
#include"Point.H"

template<typename T>
Point<T>::Point(T x, T y) : x(x), y(y){

}
--------------------------------------------------------------------------------------------------------------------------
//main.cpp
#include<iostream>
#include"Point.h"
#include"FileName.cpp"

int main() {
	Point<int> p1(3, 2);
	Point<double> p2(3.3, 2);

}
####################################################################################




8. 템플릿 클래스를 통한 배열 클래스 구현
####################################################################################
#include<iostream>

template<typename T>
class ArrayClass {
private:
	T* array;
	int length;

public:
	ArrayClass(int length) : length(length) {
		T* = new T[length]
	}

	T& operator[] (int idx) {
		if (idx >= length) {
			std::cout << "배열의 크기를 초과함";
			exit(1);
		}
		else {
			return T[idx];
		}
	}

};

void main() {
	ArrayClass<int> a1(3);
	a1[0] = 3;

	ArrayClass<double> a2(3);
	a2[0] = 32.3;
}
####################################################################################






9. 템플릿 안에 템플릿

템플릿 클래스 안에 멤버로 템플릿 객체를 저장할경우 아래와 같이 사용할 수 있다.
ArrayClass<Point<int>> array1(3);

*ArrayClass의 저장 대상이 Point 객체가 아닌 Point 형 포인터일 경우 아래와 같이 표현 가능
ArrayClass<Point<int>*> array1(3);

*또한 ArrayClass<Point<int>> array1(3); 형태로 선언할 경우, 이는 Point<int>의 객체를 생성하기에 default 생성자를 호출함
<-> ArrayClass<Point<int>*> array1(3), 즉 포인터 형일 경우 객체가 아닌 포인터이기에 생성자를 호출하지 않음
####################################################################################
#include <iostream>

template<typename T>
class Point {
public:
    T x, y;

    Point(T x, T y) : x(x), y(y) {};
    Point() { std::cout << "Point default 생성자\n"; }

};

template<typename T>
class ArrayClass {
public:
    T* array;
    int len;

    ArrayClass(int len) : len(len) {
        array = new T[len];
    }

    ~ArrayClass() {
        delete[] array;
    }

    T& operator[] (int idx) {
        return array[idx];
    }
};

int main() {
    Point<int> p1(3, 1);
    std::cout << "1\n";
    ArrayClass<Point<int>> array1(3);
    //이 과정에서 Point의 default 생성자를 호출하게 됨
    std::cout << "2\n";

    array1[0] = p1;
    std::cout << "3\n";

    return 0;
}
-----------------------------------------------------------------
1
Point default 생성자
Point default 생성자
Point default 생성자
2
3
####################################################################################












10. 특정 클래스의 객체를 인자로 받는 일반함수 정의와 friend 선언

*class에 typename T를 정의해도 클래스 내의 friend 함수는 클래스 멤버 함수가 아니기에 typename을 적용 받지 않음
그렇기에 friend 위에 typename T를 따로 정의해줘야 함

*엥? 매개변수를 Point p로 받으면 왜 에러가 뜨지?
-> 매개변수는 객체를 받는 것이다. 이는 매개변수를 받을 때 복사생성자를 이용하여 또하나의 객체가 생성된는 것과 같다. (지역변수 내에 사용할)
-> 즉,  클래스 템플릿 객체가 생성되는데 이때 클래스 템플릿 객체 선언 시 반드시 타입을 정의해줘야 하기 때문이다. (헷갈리면 위에 참고)
####################################################################################
#include<iostream>

template<typename T>
class Point {
private:
	T x, y;
public:
	Point(T x, T y) : x(x), y(y) {

	}


	template<typename T>
	friend void showPoint(Point<T> p);

};

template<typename T>
void showPoint(Point<T> p) {
	std::cout << p.x << p.y << "\n";
}

int main() {
	Point<int> p1(1, 23);
	showPoint(p1);
	
	Point<double> p2(1, 23.23);
	showPoint(p2);
	//123
	//123.23
	
}
####################################################################################


함수에 직접 템플릿 자료형을 정의하면 typename을 정의하지 않아도됨 -> 대신 사용할 자료형마다 명시적으로 정의해야 함
####################################################################################
#include<iostream>

template<typename T>
class Point {
private:
	T x, y;
public:
	Point(T x, T y) : x(x), y(y) {

	}

	friend void showPoint(Point<int> p);

};

void showPoint(Point<int> p) {
	std::cout << p.x << p.y << "\n";
}

int main() {
	Point<int> p1(1, 23);
	showPoint(p1);
	
	Point<double> p2(1, 23.23);
	//showPoint(p2); -> 에러: showPoint<double> 함수가 정의되지 않았기 때문에
	//123
	//123.23
	
}
####################################################################################











11. 클래스 템플릿의 특수화
위에 함수 템플릿의 특수화처럼 특정 자료형마다 다른 클래스로 호출되게끔 만들 수있다.
예를 들어 덧샘 기능을 하는 클래스라면 일반적으로 T num1 + T num2 기능을 정의하면 되는데
char * 형으로 문자열을 더할 경우 호출된 경우 따로 정의해야할때 이 클래스 템플릿의 특수화를 사용한다.
####################################################################################
#include <iostream>
#include <cstring>

template<typename T>
class Add {
public:
    T num1, num2;

    Add(T num1, T num2) : num1(num1), num2(num2) {}

    T add() {
        return num1 + num2;
    }
};

template<>
class Add <char*> {
public:
    char* str1, * str2;

    Add(char* str1, char* str2) : str1(str1), str2(str2) {}

    char* add() {
        int str1Len = strlen(str1);
        int str2Len = strlen(str2);
        int totalLen = str1Len + str2Len;

        char* addedStr = new char[totalLen + 1]; // null 문자를 고려하여 +1
        strcpy_s(addedStr, totalLen + 1, str1);
        strcat_s(addedStr, totalLen + 1, str2);

        return addedStr;
    }
};

int main() {
    Add<int> intAdd(5, 10);
    std::cout << "Sum of 5 and 10 is: " << intAdd.add() << std::endl;

    char str1[] = "Hello";
    char str2[] = "world";

    Add<char*> strAdd(str1, str2);
    std::cout << "Concatenated string is: " << strAdd.add() << std::endl;

    return 0;
}
####################################################################################
