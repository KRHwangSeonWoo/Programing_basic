[2. 클래스와객체]

(1) this 예약어

1) this는 인스턴스의 메모리 주소를 가르키는 예약어임.
자신을 호출한 인스턴스의 메모리 주소를 가르킨다고 이해하면 쉬움
#############################################################################################################################
package this_1;

public class This_1 {
	
	int age;
	String name;
	
	public void setYear(int age) {
		
		this.age = age;
		
	}
	
	
	public void printThis() {
		System.out.println(this);
	}
	
	
	public static void main(String[] args) {
		
		This_1 this1 = new This_1();
		this1.setYear(20);
		
		//아래 예제처럼 this를 이용하여 해당 함수를 호출한 인스턴스를 지정할 수 있다.
		
		System.out.println(this1.age);
		//결과 값: 20
		
		this1.printThis();
		System.out.println(this1);
		//결과값
		//this_1.This_1@7c30a502
		//this_1.This_1@7c30a502
		
	}

}
#############################################################################################################################

2) 생성자에서 다른 생성자를 호출하는 this
#############################################################################################################################
package this_1;

public class This_2 {
	
	String name;
	int age;
	
	This_2(){
		
		//this.name = "hi";
		//오류 남
		//특정 클래스 생성 중(생성자 코드 수행)에 해당 코드 안에 또 중복으로 클래스를 생성할 경우 에러가 남.
		//즉 생성자를 호출하고 해당 클래스 생성이 완료되기 이전에 클래스 생성을 할 수 없음.
		this("hwang", 24);


	}

	
	This_2(String pName, int pAge){
		
		this.name = pName;
		this.age = pAge;

	}
	
	public static void main(String[] args) {
		
		This_2 this1 = new This_2();
		System.out.println(this1.age + this1.name);
		
	}
}
#############################################################################################################################

(2) 객체 간 협력
#############################################################################################################################
package objectCop;

public class Money {
	
	int money;
	
	public Money(int pMoney) {
		this.money = pMoney;
	}
	
	

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package objectCop;

public class Taxi {
	
	public int cost() {
		
		return 10000;
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package objectCop;

public class Student {

	String name;
	Money haveMoney;
	
	public Student(String pName, Money pMoney) {
		
		this.name = pName;
		this.haveMoney = pMoney;
	}
	
	
	public static void main(String[] args) {
		
		Money money = new Money(20000);
		Student edward = new Student("edward", money);
		
		System.out.println(edward.haveMoney.money);
		//결과 값: 20000
		
		Taxi cost = new Taxi();
		edward.haveMoney.money = edward.haveMoney.money - cost.cost();
		
		System.out.println(edward.haveMoney.money);
		//결과 값: 10000
		
		
	}
}
#############################################################################################################################

(3) static 변수 
static 변수는 클래스 내부에 선언하지만, 인스턴스와는 다르게 클래스가 생성될 때 메모리에 올라가 사용 가능한 것이 아닌, 프로그램이 실행되면서 딱 한번 메모리 공간에
할당됨. 그리고 이 값은 해당 클래스로 생성한 모든 인스턴스가 공유함.
또한 인스턴스 생성같은 것이 필요 없기에 직접 참조가 가능하다.

1) 클래스에 static 변수를 생성하고 인스턴스를 생성하여 모두 같은 static 변수 값을 공유하는지 테스트
#############################################################################################################################
package staticTest;

public class Static_1 {
	
	static int static1 = 10;
	int notStatic = 10;
	
	public static void main(String[] args) {
		
		Static_1 instance1 = new Static_1();
		System.out.println(instance1.static1);
		//결과 값 : 10
		
		//static 같은 경우는 인스턴스와는 다르게 프로그램이 실행되면서 메모리에 올라가서 사용이 가능하기 떄문에 아래와 같이 클래스이름으로 직접 참조가 가능하다.
		System.out.println(Static_1.static1);
		//결과 값: 10
		
		Static_1 instance2 = new Static_1();
		instance2.static1 = instance2.static1 + 1;
		
		System.out.println(instance1.static1);
		System.out.println(instance2.static1);
		System.out.println(Static_1.static1);
		//결과 값: 11
		//11
		//11

		
		
	}

}

2) 클래스 메서드
위 1) 예제와 같은 경우 직접 참조, 인스턴스 생성하여 직접적으로 변수 값을 조정할 수 있다.
하지만 이 클래스 메서드를 이용하면 다른 클래스 파일이나 다른 패키지 등에서 static 변수의 값을 고정하면서 호출할 수 있고
static이 존재하는 클래스에 set 메소드를 생성한다면 해당 변수에 set을 할 수 있게 할 수도 있음.
#############################################################################################################################
package staticTest;

public class Static_2_1 {

	private static int a = 10;
	
	public static int getA() {
		return 10;
	}
	
	public static void setA(int a1) {
		a = a1;
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package staticTest;

public class Static_2_2 {
	
	public static void main(String[] args) {
		
		System.out.println(Static_2_1.getA());
		
	}

}
#############################################################################################################################

3) 클래스 메서드와 인스턴스 변수
클래스 메서드 안에서 인스턴스 변수를 사용할 수 없고, 인스턴스 메소드 안에서는 클래스 메소드가 사용 가능하다.
#############################################################################################################################
package staticTest;

public class Static_3_1 {
	
	private static int serialNum = 1000;
	int nick;
	
	public static int getSerialNum() {
		int i = 10;
		
		//nick = 10;
		//에러 남.
		//static 메서드 안에서는 인스턴스 변수를 사용할 수 없음 
		//왜냐하면 static 메소드 같은 경우는 프로그램이 실행되고, 메모리에 올라가게 된다. 그후 클래스 직접 참조를 이용해 사용이 가능하다.
		//여기서 인스턴스를 생성하여야만 메모리에 올라가 사용할 수 있는 변수(static 변수가 아닌 것)이기 때문에 에러가 남.
		
		serialNum = 1001;
		return serialNum;
	}
	
	public  int get2() {
		int i = 10;
		
		serialNum = 1001;
		//에러 안남
		
		return serialNum;
	}
	
	public static void main(String[] args) {
		
		Static_3_1.serialNum = 1;
		
		Static_3_1 a = new Static_3_1();
		a.nick = 10;	
	}

}
#############################################################################################################################

(3) 변수 유효 범위
#############################################################################################################################
1) 지역 변수(로컬 변수)
함수나 메소드 안에서만 사용 가능 (함수가 호출될 때 생성되고, 함수가 끝나면 소멸), 접근 제어자 사용 불가

2) 멤버 변수(인스턴스 변수)
접근 제어자가 허용한 한도에 있으면 사용 가능(인스턴스를 생성하고)
인스턴스 생성 시 힙에 생성되고, 가비지 컬렉터가 메모리를 수거할 때 수거됨.

3) static 변수(클래스 변수)
마찬가지로 클래스를 접근 제어자가 허용한 한도에 있으면 사용 가능(인스턴스를 생성하지 않아도 가능)
프로그램에 처음 시작할 때 상수와 함계 데이터 영역에서 생성되고 프로그램에 끝나고 메모리를 헤제할 때 소멸함.
#############################################################################################################################

(4) 싱글톤 패턴
여러개의 인스턴스를 생성하여 사용하는 경우도 있고, 단 하나의 인스턴스만 필요한 경우도 있음.
이때 단 하나의 인스턴스만 생성하는 디지인 패턴을 싱글톤 패턴이라 함.

***아래와 같은 설정이 필요함.***
1. 생성자는 private
2. 클래스에 유일한 인스턴스는 private, static 
3. 외부에서 참조할 수 있는 public 메소드는 static

#############################################################################################################################
package singleton;

public class Singleton {
	
	
	private static Singleton singleton = new Singleton();
	
	private Singleton() {
		
	}
	
	public static Singleton getSingleton() {
		
		return singleton;
		
	}
	

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package singleton;

public class Singleton_get {

	
	public static void main(String[] args) {
		Singleton singleton = Singleton.getSingleton();
		System.out.print(singleton);
	}
}
#############################################################################################################################
