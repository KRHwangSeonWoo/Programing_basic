[클래스의 기본]

1. 접근제어자

클래스와 구조체의 차이점
초기화 시 차이점이 있다! -> 클래스 외부에서 멤버 변수나 함수를 사용하기 위해서는 접근 제어자을 붙여줘야 한다!

#접근 제어자란 무엇인가?
public: 어디서든 접근 허용
protected: 상속 관계에 놓여 있을 때, 유도 클래스에서의 접근 허용
private: 클래스 내(클래스 내의 정의된 함수)에서만 접근 허용

#아무것도 정의하지 않았을 때 
구조체 -> public으로 간주
클래스 -> private로 간주

###############################################################
#include <iostream>

struct StructCar {
	int wheel;
	char size[6] = "small";

	void printWheel() {
		std::cout << wheel;
	}
};

//구조체도 접근 제어자 사용이 가능하다.
struct PrivateStructCar {
private: 
	int wheel;
	char size[6] = "small";

	void printWheel() {
		std::cout << wheel;
	}
};


class ClassCar {

public:

	int wheel;
	char size[6] = "small";

	void printWheel() {
		std::cout << wheel;
	}
};

class TestCar {

	int wheel;
	char size[6] = "small";

	void printWheel() {
		std::cout << wheel;
	}
};

int main() {
	struct StructCar car1 = { 4, "midi" };
	std::cout << car1.size;
	//위에 struct에서 문자열 배열 small을 midi로 재정의했지만 오류가 안남
	//이건 재정의한 것이 아니라 인자 값이 없을 경우 small이란 값이 넣어지는 것임
	//초기화가 안된 배열에 인자값을 넣을 경우 해당 인자값이 들어가고, 인자값이 없는 경우 default로 정의한 값이 들어가는 것임


	ClassCar car2 = { 4, "small" };
	TestCar car3;
	//std::cout << car3.wheel; 오류 발생 -> Class 내부에 선언된것은 접근제어자로 외부에서 
	//접근 가능하게 선언해줘야 밖에서 접근이 가능함

}
###############################################################




2. C++에서의 파일분할
어떤 프로그램이든 하나의 파일에 모든 것을 담지 않음.
특히 C++은 클래스 별로 헤더 파일(클래스 선언)과 소스 파일(클래스 정의) 생성하여 분리하는 경우가 많기에 수많은 파일이 만들어진다.
#중복 정의를 피하기 위해 모든 헤더 파일에는 #ifndef - #endif를 정의한다.

#include를 하면 해당 파일의 함수 스키마를 스캔하여 해당 함수가 있을 시 컴파일 오류를 안뜨게한다.
헤더 파일이든, 소스 파일이든 간에 안에 함수가 정의되어 있으면 OK!

#우리가 헤더 파일만 include해도 문제 없는 이유는
컴파일 시 해더 파일에 정의된함수가 정의되있지 않아도 선언만 되어있어도 해당함수를 사용할수있다는 걸 인식하기 때문이다

###############################################################
//Test.h
#ifndef EXAMPLE_H  // 이 부분이 헤더 가드의 시작입니다.
#define EXAMPLE_H

// 헤더 파일의 내용이 여기에 들어갑니다.

class Test {
public:
    Test();  // 예시 멤버 함수
    void print();  // 예시 멤버 함수
};

#endif  // EXAMPLE_H 헤더 가드의 끝
-------------------------------------------------------------------------------------------
//Test.cpp
#include "Test.h"
#include<iostream>

Test::Test() {
}

void Test::print() {
        std::cout << "print 함수";
    
    }// 예시 멤버 함수
-------------------------------------------------------------------------------------------
//main.cpp
#include"Test.h"

int main() {
	Test test;
	test.print();

}
###############################################################

***아래 방법 처럼 헤더 파일 없이 cpp로만도 가능함***
###############################################################
// Test.cpp

#include<iostream>

class Test {
public:
    Test() {
    }

    void print() {
        std::cout << "hihi\n";
    }
};
-------------------------------------------------------------------------------------------
// main.cpp

#include "mainTest.cpp"  // 주의: 이 부분에서 cpp 파일을 직접 include

int main() {
    Test test;
    test.print();
    return 0;
}
###############################################################










3. 헤더가드
헤더 가능은 중복적인 헤더 파일 include를 막는 것이다.
예를 들어 Cal.h(#include"Add.h", #include"Min.h"), Add.h가 있다고 가정한다.
cpp에서 Calculation.h 하나만 사용하면 무방하지만 실제 개발환경은 헤더 파일또한 너무 많아 헷갈리다보니 Calculation 안에 Add함수가 있는지 모른다.

프로그래머는 Cal.h와 Add.h를 include 시도를 한다.
Cal.h안에 Add.h가 포함되어 있기에 Add.h를 두번 호출하는 꼴이된다.
-> 에러 발생

그렇기에 Add.h에 헤더 가드를 붙여 중복 호출을 막는다.

###############################################################
/*
Test.h

#ifndef EXAMPLE_H  // 이 부분이 헤더 가드의 시작입니다.
#define EXAMPLE_H

// 헤더 파일의 내용이 여기에 들어갑니다.

class Test {
public:
    Test();  // 예시 멤버 함수
    void print();  // 예시 멤버 함수
};

#endif  // EXAMPLE_H 헤더 가드의 끝
*/

class Test {
public:
    Test();  // 예시 멤버 함수
    void print();  // 예시 멤버 함수
};
-------------------------------------------------------------------------------------------
//Test2.h
#include"Test.h"
-------------------------------------------------------------------------------------------
Test.cpp
#include "Test.h"
#include<iostream>

Test::Test() {
}

void Test::print() {
        std::cout << "print 함수111";
    
    }// 예시 멤버 함수
-------------------------------------------------------------------------------------------
#include"Test.h"
#include "Test2.h"
int main() {
	Test test;
	test.print();

}
###############################################################
오류 발생








4. 인라인 함수는 헤더 파일에 명시해야 한다. (정확히는 #include하는 파일에 직접 정의되어 있어야 한다)

인라인 함수 -> 컴파일 시 대체됨.
즉 인크루드한 파일에 인라인 함수가 대체됨
먄약 헤더파일을 인크루드하면 헤더파일의 정의되지 않은 함수가 대체됨 -> 오류



5. 클래스 기반의 두가지 객체 생성 방법

1) Classname obj1
//일반적인 변수의 선언방식
2) Classname *obj = new Classname
//동적 할당방식（힙 할당방식）
#####################################################################################
#include<iostream>

class student {

public: 

	char name[10];
	int age;

	void print() {
		std::cout << name << age;
	}


};

void main() {
	student s1;
	//s1을 선언했을 때 s1.name도 선언됨 즉 s1.name;으로 선언되어 이후 s1.name = "hwang"이 불가능함
	//(문자열)배열의 초기화는 선언시에만 가능하기 때문, 그렇기에 초기화 시 strcpy함수를 사용해야 함
	student* s2 = new student;
	//에러 -> 배열은 선언과 동시에 초기화해야 에러가 안남
	/*
	s1.name = "hwang"
	char a[10];
	a = "hwang";
	*/
	const char* ptr;
	ptr = "hwang";
	//가능

}
#####################################################################################
