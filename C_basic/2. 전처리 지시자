[전처리 및 지시자]

1. 전처리기 지시자

(1) #include란

#include는 다른 파일의 내용을 현재 파일에 포함시키도록 하는 전처리기 지시자임. 이는 헤더 파일이라고도 부름.
표준 헤더 파일은 <>, 일반 헤더 파일은 ""로 감싸서 선언한다.
##############################################################################################################################################################################################################################################################################################
//FileName.h
#include <stdio.h>

int a = 10;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//pratice1.cpp
//위에서 stdio.h를 포함하고 있기에, 따로 선언을 하지 않아도됨.
#include "FileName.h"
int main() {
	
	printf("%d", a);
	//10
	//위 파일에 변수를 가져다가 사용
}
###############################################################################################################################################################################################################################################################################################














(2) extern 사용법

extern 지시자를 이용하여 외부에 있는 파일의 변수, 함수를 가져다 사용할 수 있다. (예제에서는 실행한 파일과 가져온 파일의 폴더 위치가 같았음)
###############################################################################################################################################################################################################################################################################################
#include <stdio.h>

int a = 10;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
int main() {
	extern int a;
	printf("%d", a);
}
################################################################################################################################################








(3) define 지시자 VS static
전처리기는 #define으로 정의된 것을 상수화 시켜준다. 전처리기는 #define 상수로 정의된 내용이 실제로 상수인지는 신경쓰지 않는다.

#define은 전처리 지시어로, 컴파일러가 코드를 처리하기 전에 미리 정의된 값을 지정하는데 사용됩니다. 
이는 간단한 텍스트 치환으로 동작합니다. 매크로는 주로 상수나 간단한 함수를 정의하는데 사용되며, 코드에서 특정 값을 반복해서 사용할 때 유용합니다.

static은 변수나 함수에 사용되는 저장 클래스 지정자입니다. 
• 전역변수에 선언된 static의 의미
-> 선언된 파일 내에서만 참조를 허용하겠다는 의미
• 함수 내에 선언된 static의 의미
-> 한번만 초기화되고, 지역변수와 달리 함수를 빠져나가도 소멸되지 않는다.

#define -> 외부에서 가져올수있음
static -> 외부에서 가져올 수 없음
################################################################################################################################################
#include <stdio.h>

#define MESSAGE "HELLO GUYS"
int main() {
    puts(MESSAGE);

   // MESSAGE = "hi";
   //#define은 상수이기에 고치면 에러
    return 0;
}
################################################################################################################################################



