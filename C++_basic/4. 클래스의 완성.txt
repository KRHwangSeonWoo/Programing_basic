[클래스의 완성]


1. 정보은닉
만약 객체의 매개 변수가 특정한 조건을 갖춰야 한다면 멤버 변수를 private로 하여 함수를 통해 초기화할 수 있도록 하는 것이 좋다.
main 함수에서 객체를 생성하고 직접 값을 할당하므로써 조건의 맞지 않는 값이 들어갈 수 있기 때문

즉, 멤버변수는 private로 선언하여 다른 곳에서 접근하지 못하도록 하고 오직 set 함수에서만 맴버변수 값을 할당하도록 하는 것임
#####################################################################################
#include<iostream>

class PublicAge{
public:
    int age;
};

class PricateAge{
private:
    int age;

public:
    void setAge(int age){
        if (age < 0) {
            std::cout << "잘못된 값";
            return;
        }
        else {
            this->age = age;
        }

    }

};

int main() {
    //잘못된 값이 들어갈수있음
    PublicAge age1;
    age1.age = -1;

    PricateAge age2;
    age2.setAge(1);
    age2.setAge(-1);
}
#####################################################################################










2. const 함수
객체의 맴버변수값을 변경하는 시도가 있으면 에러를 띄운다.
ex) 정보은닉에서 맴버변수의 값을 호출하는 get함수와 set 함수가 있으면 get 함수같은 경우 맴버변수의 값이 변경되면 안되기에 실수를 예방하고자 const 함수로 선언한다.
#const 함수 안에 또다른 함수를 호출할때 해당 함수도 const로 선언되어야 에러가 안뜸
#####################################################################################
#include<iostream>

class PricateAge{
private:
    int age;

public:
    void setAge (int age){
        if (age < 0) {
            std::cout << "잘못된 값";
            return;
        }
        else {
            this->age = age;
        }

    }
    void getAge() const {
        std::cout << age;
        //setAge(10); //에러 발생 -> const 함수 내에 실행되는 다른 함수도 const 선언이 되어야됨
    }

};

int main() {

}
#####################################################################################








3. 캡슐화
여러 클래스의 메소드를 한번에 불러오는 방법이다.
ex) 예를 들어 "게보린"의 경우 두통, 치통, 생리통 완화의 기능을 가지고있다.
만약 두통 치통 생리통이라는 클래스를 각각 만든 경우, main 함수에서 3개의 클래스의 객체를 전부 불러와서 "**통 완화~"를 출력해야한다.
하지만 캡슐화를 통해서는 해당 객체의 메소드를 하나의 객체의 메소드로 불러올수있다.

[캡슐화를 사용하지 않을 경우, 게보린을 먹을 때마다 3개 객체의 메소드를 각각 불러와야함 -> 불편] 
#####################################################################################
#include<iostream>

class Head {
public:
    void headOk() {
        std::cout << "두통 완화~";
    }
};

class Tooth {
public:
    void toothOk() {
        std::cout << "치통 완화~";
    }
};

class Sang {
public:
    void sangOk() {
        std::cout << "생리통 완화~";
    }
};
            void main() {
                Head head;
                head.headOk();
                Tooth tooth;
                tooth.toothOk();
                Sang sang;
                sang.sangOk();
            }
 //두통 완화~치통 완화~생리통 완화~
####################################################################################


[캡슐화를 사용할 경우 게보린 객체만 생성하여 다른 객체의 메소드 출력] 
####################################################################################
#include<iostream>

class Head {
public:
    void headOk() {
        std::cout << "두통 완화~";
    }
};

class Tooth {
public:
    void toothOk() {
        std::cout << "치통 완화~";
    }
};

class Sang {
public:
    void sangOk() {
        std::cout << "생리통 완화~";
    }
};

class Geborin {
private:
    Head head;
    Tooth tooth;
    Sang sang;

public:
    void getGeborin() {
        head.headOk();
        tooth.toothOk();
        sang.sangOk();
    }
};


void main() {
    Geborin ge;
    ge.getGeborin();
}
####################################################################################






4. 생성자
객체를 생성할 때 생성자를 통하여 객체의 멤버변수 값을 초기화하거나,
객체를 생성할 때 특정 로직을 수행할 수 있음
객체를 생성할때는 무조건!!!!!!!!!!!!!!!생성자가 호출된다.
근데 클래스안에 객체를 생성하지 않아도 default 생성자로 아래식으로 자동으로 생성된다.
------------------
Student() {
}
------------------
####################################################################################
#include<stdio.h>

class Student {
public: 
	int age;
	char name[10];

	//기본 생성자 -> 개발자가 생성자를 추가적으로 만들지 않아도
	//기본적으로 제공함
	Student() {

	}

	Student(int age, const char* name){
		this->age = age;
		this->name = name;
	}
};


int main() {

	//생성자를 이용하여 객체를 생성하는 3가지 방법
	Student s1(10, "hwang");
	Student *s2 = new Student;
	Student* s2 = new Student();

	s1.age = 20;
	s2->age = 10;
	
	Student s2(); //해당 코드는 함수의 "선언"으로 표현됨
	//생성자로 사용하기 위해서는 매개변수를 넣어야함
	//s2.age = 10;에러


}

Student S2() {

	Student s;
	return s;
}
####################################################################################











5. 멤버 이니셜라이즈드
위처럼 생성자 함수 내에서 멤버변수 초기화가 가능하지만, 멤버이니셜라이즈를 이용하여 멤버변수 초기화도 가능함
(간단히 값을 넣는 것이 가능, 무슨 strcpy같은 함수써서 초기화는 불가)
----------------------------------------------
Student(int _age, const char* _name)
		:age(_age)
	{
		strcpy(name, _name);
	};
----------------------------------------------

####################################################################################
#include<stdio.h>
#include <cstring>

class Student {
public:
	int age;
	char name[10];

	Student(int age, const char* name)
		:age(age)
	{
		strcpy(this->name, name);
	};

};


	int main() {
		Student s1(10, "hwang");


	}

####################################################################################





5-1) 멤버 이니셜라이즈의 const 멤버 변수 초기화
멤버 이니셜라이즈를 이용하여 const 멤버 변수를 초기화할 수 있다.
나머지는 다 불가능하다.


어떻게 가능했을까?
결론: const 변수의 선언 후 바로 초기화해야함. 즉 메모리 할당 후 바로 초기화가 되어야함
예를 들어)
const int a;
a = 10; //-> 에러 

const int a = 10; //에러 X

즉 int a라는 메모리를 할당한 후 바로 초기화해야한다는 것이다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
위와다르게 멤버이니셔라이즈는 생성자를 메모리할당과 동시에 정의된 멤버이니셔라이즈를 호출하여 멤버변수를 초기화한다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
이니셜라이저를 통해서 초기화되는 멤버는 선언과 동시에 초기화가 이뤄지는 것과 같은 유형의 바이너리
코드를 구성하기 때문이다. 반면, 생성자의 몸체에서 보인 다음의 초기화는,
num2=n2;
다음의 두 문장에 비유할 수 있다.
int num2;
num2=n2;

즉, 이니셜라이저를 이용하면 선언과 동시에 초기화가 이뤄지는 형태로 바이너리 코드가 생성된다. 반면, 

생성자의 몸체부분에서 대입연산을 통한 초기화를 진행하면, 선언과 초기화를 각각 별도의 문장에서
진행하는 형태로 바이너리 코드가 생성된다. 그리고 우리는 이러한 사실로부터 다음의 가능성을 발견하
게 된다. const 변수는 선언과 동시에 초기화해야 하기 때문이다.

####################################################################################
#include<iostream>

class student {
public:
	const int age;

	/* 에러 발생
 	student(int age){
	this->age = age;
	}
	*/

	student(int age)
	:age(age){

	}
};

int main() {
	/*
	student* s1 = new student;
	student s2; -> 에러가 발생함
	*/
	
	student* s1 = new student(10); 
	student s2(10);


}
####################################################################################














5-2) 멤버 이니셜라이즈를 이용한 참조자 변수 초기화
위와 마찬가지로 참조자 변수를 선언할 때는 반드시 초기화까지 이루어져야한다.
마찬가지로 멤버 이니셜라이즈를 통해 초기화가 가능하다.
####################################################################################
#include<iostream>

class student {
public:
	int& num;

	student(int &num)
	: num(num){
	};

};
int main() {


	int a = 10;
	//int& b; 오류
	student s1(a);

	s1.num;
	

}
####################################################################################









6. 디폴트 생성자
객체는 메모리할당 이후 생성자의 호출까지 완료되어야 "객체"라고 할수있다.
즉 객체가 되기위해서는 반드시 하나의 생성자가 호출되어야한다.
이때 아무런 생성자를 정의하지 않을 시 컬파일러는 자동적으로 디폴트 생성자를 삽입하여 컴파일하게 된다.
디폴트 생성자는 인자를 받지 않으며, 내부적으로 아무런 일을 하지않는 생성자이다.

만약 클래스에 다른 생성자가 이미 정의가 되어있으면 default 생성자는 만들어지지 않는다.
####################################################################################
#include<iostream>

class student {
public:
	int age;
	/* 생성자가 없을 때 컴파일러에 의해 자동으로 삽입되는 생성자
	student() {
	}
	*/
};
int main() {

	student s1;

}
####################################################################################


6-1) 동적 메모리 할당 시 new와 malloc의 차이점

1. new: 메모리 크기만큼 메모리 할당 후 객체 생성 시 생성자를 호출함
2. malloc: 메모리 크기만큼 할당만 함 (생성자 호출 X) -> 생성자를 호출하지 않아 "객체"로 볼 수 없지만 "포인터 변수"로써 멤버 변수와 
메소드를 사용할 수 있긴함

[malloc으로 포인터 변수를생성하여 멤버변수와 메소드를 사용하는예제]
####################################################################################
#include <iostream>
using namespace std;

class test {
public:
    int a;

    void print() {
       printf("%d", a);

}

};

int main() {


    test* myTest = (test*)malloc(sizeof(test));
    myTest->a = 10;
    printf("%d", myTest->a);
    //10
    myTest->print();
    //10
    free(myTest);

    return 0;
}
####################################################################################

####################################################################################
#include<iostream>

class student {
public:
	int age;
	student(int age) {
		age = age;
		std::cout << "생성자 호출됨";
	}
};
int main() {

	student* s1 = new student(10);
	//생성자 호출됨
}
####################################################################################













7. private 생성자
이부분은 private 생성자 말고도 많은 얘기가 있다.

1) private 생성자
우선 public 생성자를 이용하여 객체를 생성한다.
이후 클래스에 정의된 메소드 안에서 private 생성자를 호출하여 동적으로 객체를 생성한다.
동적으로 생성한 객체를 이용 return한다.
(이때 동적으로 할당한 경우 참조자 변수를 받아야 메모리 delete가 용이하고, 메모리 사용률을 줄일 수 있다)

2) return 타입이 &인 경우, 일반적으로 그냥 변수 이름으로 return하면 되지만
포인터 변수를 참조로써 return하고 싶다면 return 값을 *포인터 변수로 해주면된다.
이는 그 값을 복사한 것이 아니라 해당 정수에 대한 참조자라고 보면된다.

3) 동적으로 생성한 객체의 멤버 변수를 가르키기 위해서는 this->age이런 식으로 해야한다.
그냥 age로 사용할 시 에러가 발생함
####################################################################################
#include <iostream>

class student {
private:
    int age;

public:
    student() {

    };


    student& callStudent(int age) {
        student* s1 = new student(age);
	std::cout << s1 << "\n";
        return *s1;
    }

    void callAge() {
        std::cout << age << "\n";
    }

private:

    student(int age) {
        this->age = age;
    }

};

int& returnint(int a) {
    int* b = new int(a);
    return *b;

}

int main() {
    int a = returnint(10);
    std::cout << a << "\n"; // 10

    student s1;
    student& s2 = s1.callStudent(20);
    std::cout << &s2 << "\n";
    //0000028104F54D30
    //0000028104F54D30

    student s3 = s1.callStudent(30);
    std::cout << &s3 << "\n";
    //000002054CD9F390
    //000000E0B69CF734
    
    s2.callAge();

    delete& s2;
    //s3에 객체의 값을 준 s1.call..() 함수에서 동적으로 할당한 함수의 메모리도 delete해줘야 하는 것이 맞음


}
####################################################################################





8. 객체 소멸자
객체가 소멸될 경우, 자동으로 객체 소멸자가 호출된다.
생성자와 마찬가지로 만약 객체 소멸자가 정의되어있지 않으면 컴파일러가 자동으로 default 소멸자를 생성한다.
~student(){
}

*객체 생성 방식에 따른 객체 소멸자 호출
1) student s1; -> 프로그램 종료 시 객체 소멸자가 호출됨
2) student *s2 = new student; delete하여 객체를 소멸 시 소멸자가 호출됨 (프로그램 종료로는 동적으로 할당된 객체인 경우 소멸자가 호출되지 않음)

####################################################################################
#include<iostream>

class student {
public:
	int age;

	~student() {
		std::cout << "객체 소멸자 생성\n";
	}
};


int main() {
	student s1;
	student s2;

	student* s3 = new student;
	delete s3;
	printf("--------------\n");
	student* s4 = new student; //객체 소멸자가 호출되지 않음

	/*
객체 소멸자 생성
--------------
객체 소멸자 생성
객체 소멸자 생성.
	*/
}
####################################################################################










9. 객체 배열
객체 배열을 생성하는 경우 아래 두개중에 하나를 선택해서 생성할 수 있다.
student student1[3];
student* student2 = new student[3];

배열을 선언하는 경우에도 생성자는 호출이 된다. 
단, 배 열의 선언과정에서는 호출할 생성자를 별도로 명시하지 못한다（생성자에 인자를 전달하지 못한다）. 즉, 
위의 형태로 배열이 생성되려면 다음 형태의 생성자가 반드시 정의되어 있어야 한다.
student（） {....}

또한 아래 예제는 student 객체에 필요한 메모리만큼만 인수를 전달하는 좋은 예제이니 꼭 이해하자
####################################################################################
#include<iostream>
#include <cstring>

class student {
public:
	int age;
	char *name;
};


int main() {

	student student1[3];
	student* student2 = new student[3];
	
	
	for (int a=0; a < 3; a++) {
	
		char tmp_name[30];
		std::cin >> student1[a].age;
		std::cin >> tmp_name;
		
		int tmp_name_length = strlen(tmp_name) + 1;
		char* obj_tmp_name = new char[tmp_name_length];
		strcpy_s(obj_tmp_name,tmp_name_length, tmp_name);
		student1[a].name = obj_tmp_name;
		
	}
	
	std::cout << student1[0].age;
	std::cout << student1[0].name;
	std::cout << student1[1].age;
	std::cout << student1[1].name;
	std::cout << student1[2].age;
	std::cout << student1[2].name;
	/*
10
hwang
20
kim
3
f
10hwang20kim3f
	*/


}
####################################################################################









10. this 포인터
this는 호출된 객체의 주소를 의미한다.
이걸 왜 사용하냐?
함수 내 지역변수와 멤버 변수가 일치하면 지역변수를 우선시한다.
(하지만 이경우 -> age = age, 멤버변수 = 지역변수로 인식이됨)

그렇기에 this->를 사용하여 객체의 멤버변수로 인식하게 한다.
####################################################################################
#include <iostream>

class student {
public:
  int age;
  void print(int age) {   
    
  std::cout << age << std::endl; //지역 변수로 인식됨.
  //age = age; 이 경우에는 age(멤버변수) = age(매개변수)로 인식됨
  //지역변수와 같은 이름을 사용하는 멤버변수의 값을 초기화하기 위해서는 this를 사용해준다.
    
  this->age = 30;
  std::cout << this->age << std::endl; 

               
}
};

int main() {
  student s1;
  s1.print(20);
  //20
  //30
}
####################################################################################







[클래스의 완성]


1. 정보은닉
만약 객체의 매개 변수가 특정한 조건을 갖춰야 한다면 멤버 변수를 private로 하여 함수를 통해 초기화할 수 있도록 하는 것이 좋다.
main 함수에서 객체를 생성하고 직접 값을 할당하므로써 조건의 맞지 않는 값이 들어갈 수 있기 때문

즉, 멤버변수는 private로 선언하여 다른 곳에서 접근하지 못하도록 하고 오직 set 함수에서만 맴버변수 값을 할당하도록 하는 것임
#####################################################################################
#include<iostream>

class PublicAge{
public:
    int age;
};

class PricateAge{
private:
    int age;

public:
    void setAge(int age){
        if (age < 0) {
            std::cout << "잘못된 값";
            return;
        }
        else {
            age = age;
        }

    }

};

int main() {
    //잘못된 값이 들어갈수있음
    PublicAge age1;
    age1.age = -1;

    PricateAge age2;
    age2.setAge(1);
    age2.setAge(-1);
}
#####################################################################################










2. const 함수
객체의 맴버변수값을 변경하는 시도가 있으면 에러를 띄운다.
ex) 정보은닉에서 맴버변수의 값을 호출하는 get함수와 set 함수가 있으면 get 함수같은 경우 맴버변수의 값이 변경되면 안되기에 실수를 예방하고자 const 함수로 선언한다.
#const 함수 안에 또다른 함수를 호출할때 해당 함수도 const로 선언되어야 에러가 안뜸
#####################################################################################
#include<iostream>

class PricateAge{
private:
    int age;

public:
    void setAge (int age){
        if (age < 0) {
            std::cout << "잘못된 값";
            return;
        }
        else {
            age = age;
        }

    }
    void getAge() const {
        std::cout << age;
        //setAge(10); //에러 발생 -> const 함수 내에 실행되는 다른 함수도 const 선언이 되어야됨
    }

};

int main() {

}
#####################################################################################








3. 캡슐화
여러 클래스의 메소드를 한번에 불러오는 방법이다.
ex) 예를 들어 "게보린"의 경우 두통, 치통, 생리통 완화의 기능을 가지고있다.
만약 두통 치통 생리통이라는 클래스를 각각 만든 경우, main 함수에서 3개의 클래스의 객체를 전부 불러와서 "**통 완화~"를 출력해야한다.
하지만 캡슐화를 통해서는 해당 객체의 메소드를 하나의 객체의 메소드로 불러올수있다.

[캡슐화를 사용하지 않을 경우, 게보린을 먹을 때마다 3개 객체의 메소드를 각각 불러와야함 -> 불편] 
#####################################################################################
#include<iostream>

class Head {
public:
    void headOk() {
        std::cout << "두통 완화~";
    }
};

class Tooth {
public:
    void toothOk() {
        std::cout << "치통 완화~";
    }
};

class Sang {
public:
    void sangOk() {
        std::cout << "생리통 완화~";
    }
};
            void main() {
                Head head;
                head.headOk();
                Tooth tooth;
                tooth.toothOk();
                Sang sang;
                sang.sangOk();
            }
 //두통 완화~치통 완화~생리통 완화~
####################################################################################


[캡슐화를 사용할 경우 게보린 객체만 생성하여 다른 객체의 메소드 출력] 
####################################################################################
#include<iostream>

class Head {
public:
    void headOk() {
        std::cout << "두통 완화~";
    }
};

class Tooth {
public:
    void toothOk() {
        std::cout << "치통 완화~";
    }
};

class Sang {
public:
    void sangOk() {
        std::cout << "생리통 완화~";
    }
};

class Geborin {
private:
    Head head;
    Tooth tooth;
    Sang sang;

public:
    void getGeborin() {
        head.headOk();
        tooth.toothOk();
        sang.sangOk();
    }
};


void main() {
    Geborin ge;
    ge.getGeborin();
}
####################################################################################






4. 생성자
객체를 생성할 때 생성자를 통하여 객체의 멤버변수 값을 초기화하거나,
객체를 생성할 때 특정 로직을 수행할 수 있음
객체를 생성할때는 무조건!!!!!!!!!!!!!!!생성자가 호출된다.
근데 클래스안에 객체를 생성하지 않아도 default 생성자로 아래식으로 자동으로 생성된다.
------------------
Student() {
}
------------------
####################################################################################
#include<stdio.h>

class Student {
public: 
	int age;
	char name[10];

	//기본 생성자 -> 개발자가 생성자를 추가적으로 만들지 않아도
	//기본적으로 제공함
	Student() {

	}

	Student(int age, const char* name){
		age = age;
		name = name;
	}
};


int main() {

	//생성자를 이용하여 객체를 생성하는 3가지 방법
	Student s1(10, "hwang");
	Student *s2 = new Student;
	Student* s2 = new Student();

	s1.age = 20;
	s2->age = 10;
	
	Student s2(); //해당 코드는 함수의 "선언"으로 표현됨
	//생성자로 사용하기 위해서는 매개변수를 넣어야함
	//s2.age = 10;에러


}

Student S2() {

	Student s;
	return s;
}
####################################################################################











5. 멤버 이니셜라이즈드
위처럼 생성자 함수 내에서 멤버변수 초기화가 가능하지만, 멤버이니셜라이즈를 이용하여 멤버변수 초기화도 가능함
(간단히 값을 넣는 것이 가능, 무슨 strcpy같은 함수써서 초기화는 불가)
----------------------------------------------
Student(int _age, const char* _name)
		:age(_age)
	{
		strcpy(name, _name);
	};
----------------------------------------------

####################################################################################
#include<stdio.h>
#include <cstring>

class Student {
public:
	int age;
	char name[10];

	Student(int age, const char* name)
		:age(age)
	{
		strcpy(this->name, name);
	};

};


	int main() {
		Student s1(10, "hwang");


	}

####################################################################################





5-1) 멤버 이니셜라이즈의 const 멤버 변수 초기화
멤버 이니셜라이즈를 이용하여 const 멤버 변수를 초기화할 수 있다.
나머지는 다 불가능하다.


어떻게 가능했을까?
결론: const 변수의 선언 후 바로 초기화해야함. 즉 메모리 할당 후 바로 초기화가 되어야함
예를 들어)
const int a;
a = 10; //-> 에러 

const int a = 10; //에러 X

즉 int a라는 메모리를 할당한 후 바로 초기화해야한다는 것이다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
위와다르게 멤버이니셔라이즈는 생성자를 메모리할당과 동시에 정의된 멤버이니셔라이즈를 호출하여 멤버변수를 초기화한다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
이니셜라이저를 통해서 초기화되는 멤버는 선언과 동시에 초기화가 이뤄지는 것과 같은 유형의 바이너리
코드를 구성하기 때문이다. 반면, 생성자의 몸체에서 보인 다음의 초기화는,
num2=n2;
다음의 두 문장에 비유할 수 있다.
int num2;
num2=n2;

즉, 이니셜라이저를 이용하면 선언과 동시에 초기화가 이뤄지는 형태로 바이너리 코드가 생성된다. 반면, 

생성자의 몸체부분에서 대입연산을 통한 초기화를 진행하면, 선언과 초기화를 각각 별도의 문장에서
진행하는 형태로 바이너리 코드가 생성된다. 그리고 우리는 이러한 사실로부터 다음의 가능성을 발견하
게 된다. const 변수는 선언과 동시에 초기화해야 하기 때문이다.

####################################################################################
#include<iostream>

class student {
public:
	const int age;

	/* 에러 발생
 	student(int age){
	age = age;
	}
	*/

	student(int age)
	:age(age){

	}
};

int main() {
	/*
	student* s1 = new student;
	student s2; -> 에러가 발생함
	*/
	
	student* s1 = new student(10); 
	student s2(10);


}
####################################################################################














5-2) 멤버 이니셜라이즈를 이용한 참조자 변수 초기화
위와 마찬가지로 참조자 변수를 선언할 때는 반드시 초기화까지 이루어져야한다.
마찬가지로 멤버 이니셜라이즈를 통해 초기화가 가능하다.
####################################################################################
#include<iostream>

class student {
public:
	int& num;

	student(int &num)
	: num(num){
	};

};
int main() {


	int a = 10;
	//int& b; 오류
	student s1(a);

	s1.num;
	

}
####################################################################################









6. 디폴트 생성자
객체는 메모리할당 이후 생성자의 호출까지 완료되어야 "객체"라고 할수있다.
즉 객체가 되기위해서는 반드시 하나의 생성자가 호출되어야한다.
이때 아무런 생성자를 정의하지 않을 시 컬파일러는 자동적으로 디폴트 생성자를 삽입하여 컴파일하게 된다.
디폴트 생성자는 인자를 받지 않으며, 내부적으로 아무런 일을 하지않는 생성자이다.

만약 클래스에 다른 생성자가 이미 정의가 되어있으면 default 생성자는 만들어지지 않는다.
####################################################################################
#include<iostream>

class student {
public:
	int age;
	/* 생성자가 없을 때 컴파일러에 의해 자동으로 삽입되는 생성자
	student() {
	}
	*/
};
int main() {

	student s1;

}
####################################################################################


6-1) 동적 메모리 할당 시 new와 malloc의 차이점

1. new: 메모리 크기만큼 메모리 할당 후 객체 생성 시 생성자를 호출함
2. malloc: 메모리 크기만큼 할당만 함 (생성자 호출 X) -> 생성자를 호출하지 않아 "객체"로 볼 수 없지만 "포인터 변수"로써 멤버 변수와 
메소드를 사용할 수 있긴함

[malloc으로 포인터 변수를생성하여 멤버변수와 메소드를 사용하는예제]
####################################################################################
#include <iostream>
using namespace std;

class test {
public:
    int a;

    void print() {
       printf("%d", a);

}

};

int main() {


    test* myTest = (test*)malloc(sizeof(test));
    myTest->a = 10;
    printf("%d", myTest->a);
    //10
    myTest->print();
    //10
    free(myTest);

    return 0;
}
####################################################################################

####################################################################################
#include<iostream>

class student {
public:
	int age;
	student(int age) {
		age = age;
		std::cout << "생성자 호출됨";
	}
};
int main() {

	student* s1 = new student(10);
	//생성자 호출됨
}
####################################################################################













7. private 생성자
이부분은 private 생성자 말고도 많은 얘기가 있다.

1) private 생성자
우선 public 생성자를 이용하여 객체를 생성한다.
이후 클래스에 정의된 메소드 안에서 private 생성자를 호출하여 동적으로 객체를 생성한다.
동적으로 생성한 객체를 이용 return한다.
(이때 동적으로 할당한 경우 참조자 변수를 받아야 메모리 delete가 용이하고, 메모리 사용률을 줄일 수 있다)

2) return 타입이 &인 경우, 일반적으로 그냥 변수 이름으로 return하면 되지만
포인터 변수를 참조로써 return하고 싶다면 return 값을 *포인터 변수로 해주면된다.
이는 그 값을 복사한 것이 아니라 해당 정수에 대한 참조자라고 보면된다.

3) 동적으로 생성한 객체의 멤버 변수를 가르키기 위해서는 this->age이런 식으로 해야한다.
그냥 age로 사용할 시 에러가 발생함
####################################################################################
#include <iostream>

class student {
private:
    int age;

public:
    student() {

    };


    student& callStudent(int age) {
        student* s1 = new student(age);
	std::cout << s1 << "\n";
        return *s1;
    }

    void callAge() {
        std::cout << age << "\n";
    }

private:

    student(int age) {
        this->age = age;
    }

};

int& returnint(int a) {
    int* b = new int(a);
    return *b;

}

int main() {
    int a = returnint(10);
    std::cout << a << "\n"; // 10

    student s1;
    student& s2 = s1.callStudent(20);
    std::cout << &s2 << "\n";
    //0000028104F54D30
    //0000028104F54D30

    student s3 = s1.callStudent(30);
    std::cout << &s3 << "\n";
    //000002054CD9F390
    //000000E0B69CF734
    
    s2.callAge();

    delete& s2;
    //s3에 객체의 값을 준 s1.call..() 함수에서 동적으로 할당한 함수의 메모리도 delete해줘야 하는 것이 맞음


}
####################################################################################





8. 객체 소멸자
객체가 소멸될 경우, 자동으로 객체 소멸자가 호출된다.
생성자와 마찬가지로 만약 객체 소멸자가 정의되어있지 않으면 컴파일러가 자동으로 default 소멸자를 생성한다.
~student(){
}

*객체 생성 방식에 따른 객체 소멸자 호출
1) student s1; -> 프로그램 종료 시 객체 소멸자가 호출됨
2) student *s2 = new student; delete하여 객체를 소멸 시 소멸자가 호출됨 (프로그램 종료로는 동적으로 할당된 객체인 경우 소멸자가 호출되지 않음)

####################################################################################
#include<iostream>

class student {
public:
	int age;

	~student() {
		std::cout << "객체 소멸자 생성\n";
	}
};


int main() {
	student s1;
	student s2;

	student* s3 = new student;
	delete s3;
	printf("--------------\n");
	student* s4 = new student; //객체 소멸자가 호출되지 않음

	/*
객체 소멸자 생성
--------------
객체 소멸자 생성
객체 소멸자 생성.
	*/
}
####################################################################################










9. 객체 배열
객체 배열을 생성하는 경우 아래 두개중에 하나를 선택해서 생성할 수 있다.
student student1[3];
student* student2 = new student[3];

배열을 선언하는 경우에도 생성자는 호출이 된다. 
단, 배 열의 선언과정에서는 호출할 생성자를 별도로 명시하지 못한다（생성자에 인자를 전달하지 못한다）. 즉, 
위의 형태로 배열이 생성되려면 다음 형태의 생성자가 반드시 정의되어 있어야 한다.
student（） {....}

또한 아래 예제는 student 객체에 필요한 메모리만큼만 인수를 전달하는 좋은 예제이니 꼭 이해하자
####################################################################################
#include<iostream>
#include <cstring>

class student {
public:
	int age;
	char *name;
};


int main() {

	student student1[3];
	student* student2 = new student[3];
	
	
	for (int a=0; a < 3; a++) {
	
		char tmp_name[30];
		std::cin >> student1[a].age;
		std::cin >> tmp_name;
		
		int tmp_name_length = strlen(tmp_name) + 1;
		char* obj_tmp_name = new char[tmp_name_length];
		strcpy_s(obj_tmp_name,tmp_name_length, tmp_name);
		student1[a].name = obj_tmp_name;
		
	}
	
	std::cout << student1[0].age;
	std::cout << student1[0].name;
	std::cout << student1[1].age;
	std::cout << student1[1].name;
	std::cout << student1[2].age;
	std::cout << student1[2].name;
	/*
10
hwang
20
kim
3
f
10hwang20kim3f
	*/


}
####################################################################################









10. this 포인터
this는 호출된 객체의 주소를 의미한다.
이걸 왜 사용하냐?
************함수 내 지역변수와 멤버 변수가 일치하면 지역변수를 우선시한다************

***만약 여기 예제에 생성자나 set 메소드로 age=age이런식으로 멤버변수를 초기화한다면 이것은 잘못된 것임
this->age = age; 이런 식으로 해야함

***멤버이니셔라이즈로 age(age) 이런식으로 멤버변수 초기화하는 것은 OK~

####################################################################################
#include <iostream>

class student {
public:
  int age;
  void print(int age) {   
    
  std::cout << age << std::endl; //지역 변수로 인식됨.
  this->age = 30;
  std::cout << this->age << std::endl; 

               
}
};

int main() {
  student s1;
  s1.print(20);
  //20
  //30
}
####################################################################################


[age=age] NO~
####################################################################################
#include<iostream>
class student {
public:
	int age;

	student(int	age) {
		age = age;
	}

};

int main() {
	student s1(10);
	std::cout << s1.age;
	//-858993460
}
####################################################################################


[멤버이니셔라이즈 -> age(age)] OK~
####################################################################################
#include<iostream>

class student {
public:
	int age;

	student(int	age)
	:age(age){

	}


};

int main() {
	student s1(10);
	std::cout << s1.age;
	//10
}
####################################################################################







11. 객체 참조자
this는 객체의 주소를 가르키는데 *this를 사용하면 객체 자신을 의미한다.
ex) student s1로 따지면, this는 &s1, *this는 *s1이다.
변수와 상반되어 포인터 변수에 *을 붙인 경우 주소가 가르키는 값을 가르키지만 
*this는 객체 자신을 의미한다는 것이 다르다.

궁금증) class 형태의 포인터 변수를 this로 가르킬 수 있을까?
this는 현재 객체의 포인터를 가리키는데, malloc 함수로 할당한 포인터는 객체를 가리키는 것이 아니므로
malloc 함수로 할당한 포인터를 this로 사용하는 것은 C++에서 잘못된 방법

[s2는 s1의 객체 참조값을 받았기에 age를 출력했을 때 20이 나옴]
####################################################################################
#include <iostream>

class student {
public:
  int age;
  student &print() {
    std::cout << age << "\n";
    this->age = 20;
    return *this;
  }
};

int main() {

  student s1;
  student s2 = s1.print();
  std::cout << s2.age;
//20
//20
}
####################################################################################



 



12. 복사 생성자
복사 생성자를 설명하기 이전에 여러 배경지식을 설명하려한다.
복사 생성자는 객체 자체를 복사하는 것이 아닌 값만을 복사하는 생성자이다.
이또한 클래스에 정의되지 않으면 자동으로 컴파일러가 생성한다.



12-1) C++의 초기화 방식!
C++에서 int a = 10과 int a(10)은 같은 이야기다.
int &a = b, int &a(b);

그럼 객체에서의 초기화 방식은 어떠할까?
SoSimple s1;
SoSimple s2 = s1;
->
SoSimple s1(s2)인 형태이다.
* 위 형태를 풀어쓰면 아래와 같다.
 • SoSimple형 객체를 생성해라.
 • 객체의 이름은 sim2로 정한다.
 • siml을 인자로 받을 수 있는 생성자의 호출을 통해서 객체생성을 완료한다.

여기서 모든 객체는 생성자를 호출해야한다. 즉 객체를 인수로하는 생성자가 있어야한다! (s2를 매개변수로 받는!)
근데 여기서 s2을 생성할때 student에 참조 변수를 return하는 생성자를 만들었을까?
-> 아니다, 우리는 만들어 사용하지 않았다.
default 생성자처럼 객체의 참조값을 반환하는 생성자가 없다면 컴파일러가 자동 생성함


[student 클래스에 student 객체를 받고 해당 객체 참조값을 반환하는 생성자가 없음!]
####################################################################################
#include<stdio.h>

class student {
	int age;
};

int main() {
	student s1;
	student s2(s1); //여기 주목!
}
####################################################################################

-> 실제 컴파일 시 추가되는 생성자
####################################################################################
#include<stdio.h>

class student {
public:
	int age;

	student() {

	}
	/* 자동으로 생성되는 복사 생성자!
	student( student& copy) : age(copy.age) {
	
	}
	*/
	
};

int main() {
	student s1;
	s1.age = 10;
	student s2(s1);
	//student s2 = s1;와 같은 소리
}
####################################################################################






13. 객체의 묵시적 변환과 이것을 막기위한 explicit
explicit은 생성자에 사용된다.

*******************************************
class {
int age;
Student(int age) {
	this->age = age;
}
void printStudent(Student s1) {
	std::cout << s1.age;
}
}
*******************************************
위 에서 s1.printStudent(10)을 호출한 경우, 일반적으로 에러가 난다고 생각한다.
(Stduent 형과 int 형은 다르기에)
하지만 에러가 나지 않는다. 

우리가 printStudent에 10의 매개변수를 넣으면 매개변수는 아래와 코드가 똑같아진다.
Student s1 = 10 -> Student s1(10);
-> s1에 int 형으로 매개변수를 받는 생성자가 있기에 정상적으로 코드가 동작한다.

이를 허용해도 상관은 없지만 실수를 할 수 있고, 가독성이 떨어진다.
그렇기에 explicit을 사용하여 이런 형변환을 막을 수 있다.

 
[예제]
##################################################################
#include<iostream>

class Student {
public:
	int age;

	Student(int age) {
		this->age = age;
	}

	void printStudent(Student s1) {
		std::cout << s1.age;
	}

};

int main() {
	Student s1(10);
	s1.printStudent(20);
	//20
	std::cout << s1.age;
	//10


}
##################################################################




[explicit 사용 예제]
##################################################################
#include<iostream>

class Student {
public:
	int age;

	explicit Student(int age) {
		this->age = age;
	}

	 void printStudent(Student s1) {
		std::cout << s1.age;
	}

};

int main() {
	Student s1(10);
	//s1.printStudent(20); 에러
	s1.printStudent(s1);
	//10
}
##################################################################














14. 디폴트 복사 생성자 문제점과 객체의 깊은 복사 *** 꼭 알자
클래스 중 매개변수로 포인터로 가지고, 디폴트 복사 생성자를 이용하여 객체를 새로 생성한 후 새로 만든 객체나 원형 객체를 삭제할 경우 문제가 발생할 수 있다.
설명하기 이전 디폴트 복사 생성자는 멤버변수의 값을 복사하는 것이다.
(또한 멤버변수를 정의할 때 new를 사용하면 소멸자에 해당 변수를 반드시 delete해주자)

***s1, s2 객체가 있고, 아래의 코드와 같다는 것을 가정
student s1(10,"hwang");
student s2 = s1;

[메모리 구조]
s1
age -> 10
*name -> A

s2
age -> 10
*name -> A

name 문자열 주소(A) -> hwang


*만약에 s1 객체가 삭제된다면 
s2가 바라보고 있는 A 메모리또한 해체된다.
s2가 A에 대해 접근했을 때 의도치 않은 동작을 초래할 수 있음 (age(10)은 문제 X)

-> 해결방법

객체의 깊은 복사를 통해 단순히 값을 복사하는 것이 아닌
메모리를 새로할당한다.
*깊은 복사-> 객체의 깊은 복사(Deep Copy)는 객체가 다른 객체로 복사될 때, 해당 객체가 참조하고 있는 모든 동적으로 할당된 자원(예: 메모리)을 새로운 객체로 복사하는 것을 말합니다.




아래 예제로 알 수있는 것
1) 객체 멤버변수를 new로 생성했으면, 소멸자에 delete를 추가하자 (객체든 아니든 공통)
2) 디폴트 복사 생성자를 사용할 경우, 아래와 같이 값만 복사하여 사용할 경우 문제점이 있을 수 있다는 것을 인식하자 (포인터로 하는 멤버변수가 있고, 깊은 복사를 하지 않은 생성자를 사용해 객체가 만들어지고, 객체원형이나 복사된 객체가 삭제된 경우)
3) 2번일 경우, 객체의 깊은 복사로 해결할 수 있다는 것을 인식하자

##################################################################
#include<iostream>

class student {
public:
	int age;
	char* name;

	student(int copyAge, const char *copyName) {
		age = copyAge;
		int leng = strlen(copyName) + 1;
		name = new char[leng];
		strcpy_s(name, leng, copyName);
	}

	~student() {
		delete[]name; //new로 생성한 것은 반드시 delete해줘야 함
		std::cout << "소멸자\n";
	}

	/* -> 객체의 깊은 복사
	student(const student& copy) : age(copy.age) {
        int leng = strlen(copy.name) + 1;
        name = new char[leng];
        strcpy_s(name, leng, copy.name);
	*/    

}

};

int main() {
	student *s1 = new student(10, "hwang");
	student s2 = *s1;

	delete s1;

	std::cout << s2.age;
	std::cout << s2.name;

	//소멸자
	//10硼硼硼硼硼


}
##################################################################
