[재귀 함수]
재귀함수는 함수 내 동일한 함수가 존재할 경우 재귀 함수라고 한다.
재귀 알고리즘이란 재귀함수로 구성되는 알고리즘이라고 한다.

재귀의 요소는 "재귀 케이스"와 "베이스 케이스"로 구성할 수 있다.
재귀 케이스는 베이스 케이스의 조건에 충족시켜주기 위한 코드 (변수에 1을 뺀다던가 더한다던가) 
베이스 케이스는 재귀 케이스로 인해 조건을 충족하는지 확인하는 코드 (재귀를 멈추기 위해)

말로는 어려우니 아래 코드를 봐보자

########################################################
#include<stdio.h>

int recusion(int n) {
	if (n == 0) { //베이스 케이스
		printf("0이 되었습니다.");
		return n;
	}
	else {
		printf("%d입니다.", n);
		return recusion(n - 1); //	//재귀 케이스
	}
}



int main() {

	recusion(5);
	//5입니다.4입니다.3입니다.2입니다.1입니다.0이 되었습니다.

}
########################################################



[재귀함수를 이용하여 정수를 하나씩 출력하기]
예를 들어 1234를 입력하면 아래와 같이 출력
출력:
1
2
3
4

########################################################
#include <stdio.h>

void recursion(int n) {

    if (n < 10) {
            printf("%d\n", n);
        }
        else {
            recursion(n / 10);
            printf("%d\n", n % 10);
        }
 }


int main() {
    int n;
    printf("숫자를 입력하세요: ");
    scanf_s("%d", &n);
    recursion(n);
    return 0;
}
**********************************
숫자를 입력하세요: 1234
1
2
3
4
########################################################

**로직도**
recursion(1234), else의 printf("%d\n", n % 10)로 인해 4 출력
	-> recursion(123), else의 printf("%d\n", n % 10)로 인해 3 출력
		-> recursion(12), else의 printf("%d\n", n % 10)로 인해 2 출력
			-> recursion(1), if(n < 10) 블록으로 인해서 1 출력 



