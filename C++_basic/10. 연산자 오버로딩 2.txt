1. 대입 연산자
복사생성자를 통해 대입 연산자를 이해해보자

*복사 생성자 특성
대입 연산자를 알기 위해서 먼저 복사생성자에 대해 간략히 말하겠다.
1) 정의하지 않으면 디폴트 복사 생성자가 삽입됨
2) 디폴트 복사생성자는 얕은 복사를 진행함
3) 깊은 복사를 위해서는 직접 정의해야 함

*디폴트 대입 연산자 특성
1) 정의하지 않으면 디폴트 대입 연산자가 삽입
2) 디폴트 대입 연산자는 얕은 복사를 진행함
3) 깊은 복사를 위해서는 직접 정의해야 함

-> 이처럼 복사 생성자와 디폴트 대입 연산자는 매우 비슷하다.

*아니 근데, 복사생성자를 사용할 때 대입 연산자를 필요로하는데 복사생성자를 통해 객체가 복사가 되는지, 대입 연산자를 통해 복사가 되는지
그 구분하는 기준이 뭐야?
-> 복사생성자와 대입 연산자의 호출 범위

1) 복사 생성자 호출: 객체 선언과 [동시에] 다른 객체로 초기화
Student s1;
Student s2 = s1;

2) 대입 연산자 호출: 객체 선언 [후] 다른 객체로 초기화
Student s1(10);
Student s2(20);
s1 = s2;

###############################################################
#include<iostream>

class Student{
public:

	int age;
	Student() {

	}

	Student(Student& s) : age(s.age) {
		std::cout << "복사 생성자 호출\n";
	}


	Student& operator=(Student& s) {
		std::cout << "대입 연산자 호출\n";
		this->age = s.age;
		return *this;
	}
 
};

int main() {

	Student s1;
	s1.age = 10;
	Student s2;
	s2.age = 20;
	s1 = s2;
	//대입 연산자 호출


	Student s3;
	Student s4 = s3;
	//복사 생성자 호출
}
###############################################################






2. 디폴트 대입 연산자의 문제점
이것또한 디폴트 복사 생성자의 문제점과 동일하다 (얕은 복사)
바로 객체 내 동적으로 메모리를 할당할 때 문제가 발생할 수 있다.

*예를 들어 Student 클래스의 이름을 동적으로 저장한고 s1 객체를 s2로 얕은 복사를 한다고 가정한다.
그러면 메모리 구조는 아래와 같다.
***************************
#######복사 전#######
[s1]
int age -> 10
char *name -> AA 

[s2]
int age -> 20
char *name -> BB
 
0XAA
"hawng"
0XBB
"KIM"
***************************
->
***************************
#######복사 후#######
[s1]
int age -> 20
char *name -> BB

[s2]
int age -> 20
char *name -> BB

0XAA
"hawng"
0XBB
"KIM"
***************************

위처럼 객체 멤버 값이 바뀌면 아래와 같은 문제가 발생할 수 있다.

1) s1, s2 객체를 삭제해도 AA는 delete가 되지 않아 메모리 누수가 발생할 수 있음
- s1, s2 모두 BB의 값을 가지고 있기에 delete []name 시 BB만이 delete됨 

2) s1 객체에서 BB를 메모리에서 해체하고 또 다시 s2에서 BB를 메모리에서 해체하는데 이미 소멸된 문자열을 또 다시 소멸을 시도하는 문제 발생

[문제가 있는 코드]
-> s1, s2 객체 소멸해도 kim은 메모리에서 해체되지 않고, s1 삭제 후 s2 객체가 삭제될 경우 이미 소멸된 문자열을 또 다시 소멸 시도하는 문제가 발생한다
############################################################################
#include<iostream>

class Student {
public:
	int age;
	char* name;
	

	Student(int age, const char* copy_name) : age(age){
		int len = strlen(copy_name);
		name = new char[len] + 1;
		strcpy(name, copy_name);
		
	
	}
};

int main() {

	Student s1(10, "hwang");
	std::cout << s1.name;

	Student s2(20, "kim");
	std::cout << s2.name;

	s1 = s2;
}
############################################################################





[문제를 개선한 코드]
############################################################################
#include<iostream>

class Student {
public:
	int age;
	char* name;
	

	Student(int age, const char* copy_name) : age(age){
		int len = strlen(copy_name);
		name = new char[len] + 1;
		strcpy(name, copy_name);
		
	
	}

	Student& operator=(Student& s) {
		delete[] name;
		this->age = s.age;
		this->name = s.name;
	}

};

int main() {

	Student s1(10, "hwang");
	std::cout << s1.name;

	Student s2(20, "kim");
	std::cout << s2.name;

	s1 = s2;

}
############################################################################



3. 상속 구조에서의 대입 연산자 호출
상속 구조에서의 대입 연산자와 생성자 비교
1) 생성자: 자식의 default든 custom이든 생성자를 호출하면 부모의 생성자도 자동으로 호출된다. (만약 자식 생성자가 인자값을 받는 생성자만 있으면 부모 생성자에서 자식 생성자를 명시하고 인자값을 넣어줘야 한다)

2) 자식 대입 연산자 함수를 호출할 때 [default 대입 연산자]인 경우 자동으로 부모의 멤버도 초기화 시켜주지만
만약에 [custom 대입 연산자]인 경우 호출할 시에는 필요에 따라서 부모의 멤버도 초기화 시켜줘야 한다. 
(생성자처럼 명시하지 않아도 자동으로 default 생성자를 불러오는 로직이 없음. 즉 명시하지 않아도 자동으로 부모의 멤버를 초기화하는 코드가 추가되지 않음)
############################################################################
#include<iostream>

class Person {
public:
	int age;

	Person(int age) : age(age) {

	}
	
};

class Student : public Person {
public:
	int studentID;

	Student(int age, int studentID): Person(age), studentID(studentID){
	}

	Student& operator= (const Student& s) {
		//age = s.age;
		studentID = s.studentID;
		return *this;
	}

};

int main() {

	Student s1(10, 20);
	Student s2(30, 40);
	
	Student s3 = s2;
	std::cout << s3.age << s3.studentID;
	//3040
	s1 = s2;
	std::cout << s1.age << s1.studentID;
	//1040 -> 위에 age=s.age의 주석을 풀거나 Student의 operator= 함수를 주석을 걸면
	//3040으로 출력됨
	
	



}
############################################################################

















4. 클래스에서 객체를 멤버로 가질 떄 멤버 이니셔라이즈로 초기화하는 것이 효율적인 이유

1) 멤버이니셔라이즈로 초기화 시 -> 복사 생성자 1번호출 (1회 호출)
-> Second 객체 생성 시 First 멤버 초기화 -> First first = ref -> 복사생성자 호출

2) 몸체로 초기화 시 -> 객체 생성자, = 연산자 함수 호출 (2회 호출)
-> Third 객체 생성 시 First 멤버 초기화 -> First first(객체 생성자); First& ref = first; first = ref(= 연산자 함수 호출) -> 객체 생성자, = 연산자 함수 총 호출 2회 호출

* Third의 "Fist default 생성자 호출"은 Third의 멤버변수 first 객체를 생성할 때 호출되는 것임. (당연한 얘기)
* 참조자로 객체 매개변수를 받을 때는 생성자호출이 되지 않음. (참조자 정의가 되지 않으면 복사생성자가 호출됨)
* 복사생성자를 정의할 때 참조자로 받는 이유는 참조자로 받지 않을 경우 복사생성자가 loop가 돌기 때문
############################################################################
#include<iostream>

class First {

	int num;

public:
	First() : num(0) {
		std::cout << "Fist 생성자 호출\n";
	}
	
	First(const First& first) : num(first.num) {
		std::cout << "Fist 복사 생성자 호출\n";
	}
	
	First& operator=(const First& first)  {
		std::cout << "First operator= 호출\n";
		this->num = first.num;
		return *this;
	}

};

class Second {
public:
	First first;

	Second(First& ref) : first(ref) {
	}

};

class Third {
public:
	First first;

	Third(First& ref)  {
		this->first = ref;
	}

};

int main() {
	First f1;
	std::cout << "***********************\n";

	Second s1(f1);
	std::cout << "***********************\n";

	Third t1(f1);


}


Fist default 생성자 호출
***********************
Fist 멤버 이니셔라이즈 복사 생성자 호출
***********************
Fist default 생성자 호출
First operator= 호출
############################################################################











5. 배열의 인덱스 연산자 오버로딩
기존 C와 C++의 고질적인 인덱스 문제를 해결해보자!
할당되지 않은 인덱스에 접근할 때 에러가 아닌 출력이됨 -> 에러를 띄우고 싶다? 하면 이 방법을 써먹자!
############################################################################
#include<iostream>


int main() {

	int array[4] = { 1,2,3,4};
	std::cout << array[3] <<"\n";
	std::cout << array[4];
	//4
	//-858993460
}
############################################################################


[배열 연산자 클래스 안에 생성자를 통해 배열 멤버의 메모리를 동적으로 할당 받고, 
[] 연산자 오버로딩으로 함수를 정의한 후, 생성된 객체를 통해 []로 인덱스 메모리에 접근할 때는 
검사를 통해 범위를 초과하면 에러를 띄운다]
############################################################################
#include<iostream>

class ArrayLengthCheck {
public:
	int* arr;
	int arrayLen;

	ArrayLengthCheck(int arrayLen) : arrayLen(arrayLen){
		arr = new int[arrayLen];
	}

	int& operator[] (int idx) {
		if (idx < 0 || idx >= arrayLen) {
			std::cout << "배열의 범위를 초과함";
			exit(1);
		}
		return arr[idx]; //멤버 변수의 인덱스 연산자(자료형: 정수 포인터)이기에 일반적인 인덱스 연산자가 적용됨 (ArrayLenthCheck 객체가 인덱스 연산자를 사용한 게 아니라서)
	}

	~ArrayLengthCheck() {
		delete[]arr;
	}
};

int main() {
	ArrayLengthCheck array1(3);
	array1[0] = 0;
	array1[1] = 1;
	array1[2] = 2;

	std::cout << array1[0] << "\n";
	std::cout << array1[1] << "\n";
	std::cout << array1[2] << "\n";
	std::cout << array1[3] << "\n";
	/*
0
1
2
배열의 범위를 초과함	
	*/

}
############################################################################
