[배열과 ArrayList]

(1) 배열

1) 배열의 기본 구조

배열의 생성 방법 (1,2 번 같이 생성과 동시에 초기화할 경우 new int[] 생략 가능)
1. int[] array1 = new int[] {1, 2, 3};
2. int array2[] = new int[] {1, 2, 3};
3. int[] array6 = new int[10]; -> int 자료형 10개의 배열이 만들어짐

#############################################################################################################################
package 배열_3;

import java.lang.reflect.Array;

public class Array_1 {

	
	public static void main(String[] args) {
		
		//배열의 초기화 구조는 아래와 같음
		//1. 자료형[] 배열이름 = new 자료형[개수];
		int[] array1 = new int[] {1, 2, 3};
	
		//2. 자료형 배열이름[] = new 자료형[개수];
		int array2[] = new int[] {1, 2, 3};
		
		//3. 생성과 동시에 초기화 시 new 자료형 생략 가능
		//배열 선언 후 초기화 시 new 자료형 생략 불가
		int[] arra3 =  {1, 2, 3};
		int array4[] =  {1, 2, 3};
		
		int array5[];
		//array5[] = {1,2,3};
		//에러 남, 아래처럼 해야함.
		array5 = new int[] {1,2,3};		
		System.out.println(array5[0]);
		//결과 값: 1
		
		int[] array6 = new int[10];
		array6[0] = 10;
		
		for (int i = 0; i < array6.length; i++) {
			System.out.println(array6[i]);
		}
		/* 결과 값: 
		 * 10
0
0
0
0
0
0
0
0
0
		 */
		
		
		for (int i = 0; i < array1.length; i++) {
			System.out.println(array1[i]);
		}
		//결과 값 :
		//1
		//2
		//3
		
	}
}

#############################################################################################################################

2) 객체 배열
참조 자료형으로 선언하는 객체 배열을 사용한다.
#############################################################################################################################
package 배열_3;

import java.lang.reflect.Array;

public class Array_2 {
	
	String name;
	int age;
	
	public static void main(String[] args) {
		
		Array_2[] array1 = new Array_2[3];
		System.out.println(array1[0]);
		//결과 값 : null
		//결과를 보면 인스턴스가 생성되지 않음을 확인할 수 있다.
		//당연한 결과이다. 현재 배열만 선언할 뿐 생성자를 이용하여 메모리 할당을 하여 인스턴스를 생성하지 않음을 확인할 수 있다.
		//그렇기에 아래와 같이 배열 인스턴스를 생성할 수 있다.
		
		array1[0] = new Array_2();
		array1[0].name = "hwang";
		System.out.println(array1[0]);
		//결과 값 : 배열_3.Array_2@7c30a502		
		System.out.println(array1[0].name);
		//결과 값 : hwang		
	}

}
#############################################################################################################################

3) 배열 복사하기

[1] 배열 복사 기초 

배열을 복사하는데 사용하는 방법은 2가지가 있음 
1. for 문을 이용한 복사
2. System.arraycopy(src, srcPos, dest, destPos, length)

2 번의 매개변수가 의미하는 것은 아래와 같음 
src = 복사할 배열 이름
srcPost = 복사할 배열의 첫번째 위치
dest = 복사해서 붙여 넣을 대상 배열 이름
destPos = 복사해서 대상 배열에 붙여 넣기를 시작할 첫번째 위치
length = src에서 dest로 자료를 복사할 요소 개수
#############################################################################################################################
package 배열_3;

public class arrayCopy_3 {
	
	int age;
	String name;
	
	public arrayCopy_3(int age, String name) {
		this.age = age;
		this.name = name;
	}
	
	public static void main(String[] args) {
		
		arrayCopy_3[] student1 = new arrayCopy_3[3];
				
		student1[0] = new arrayCopy_3(20, "hwang");
		student1[1] = new arrayCopy_3(21, "lee");
		student1[2] = new arrayCopy_3(22, "kim");
		
		arrayCopy_3[] student1Copy = new arrayCopy_3[3];
		
		System.arraycopy(student1, 0, student1Copy, 0, 3);
		System.out.println(student1Copy[2].name);
		//결과 값 : kim
		
	}

}
#############################################################################################################################

[2] 배열의 얕은 복사와 깊은 복사

1. 얕은 복사인 경우 배열 변수 1을 배열 변수 2로 복사한다 했을 때 배열 변수 1의 주소값을 배열 변수 2에게 공유함.
즉 배열 변수 1의 값을 수정했을 때 배열 변수 2도 반영이 되고 반대로도 됨. (System.arraycoppy())
#############################################################################################################################
package 배열_3;

public class arrayCopy_3_1 {
	int age;
	String name;
	
	public arrayCopy_3_1(int age, String name) {
		this.age = age;
		this.name = name;
	}
	
	public static void main(String[] args) {
		
	
	arrayCopy_3_1[] student1 = new arrayCopy_3_1[3];
			
	student1[0] = new arrayCopy_3_1(20, "hwang");
	student1[1] = new arrayCopy_3_1(21, "lee");
	student1[2] = new arrayCopy_3_1(22, "kim");
	
	arrayCopy_3_1[] student1Copy = new arrayCopy_3_1[3];
	
	System.arraycopy(student1, 0, student1Copy, 0, 3);
	
	System.out.println(student1Copy[2].name);
	//결과 값 : kim
	student1[2].name = "han";
	
	System.out.println(student1Copy[2].name);
	//결과 값 : han

}
}
#############################################################################################################################

2. 깊은 복사인 경우 배열 변수 1, 2가 다른 주소를 가지고 있어 반영이 되지 않음 (for 문으로 구현)
#############################################################################################################################
package 배열_3;

public class arrayCopy_3_2 {

	String name;
	int age;
	
	public arrayCopy_3_2(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public void setArraycopyName(String name, int age) {
		this.name = name;
		this.age =age;
	}
	
	
	public static void main(String[] args) {
		
		
		
		arrayCopy_3_2[] array1 = new arrayCopy_3_2[2];
		arrayCopy_3_2[] array2 = new arrayCopy_3_2[2];
		
		array1[0] = new arrayCopy_3_2("lee", 10);
		array1[1] = new arrayCopy_3_2("hwang", 22);
		
		array2[0] = new arrayCopy_3_2("lee", 10);
		array2[1] = new arrayCopy_3_2("hwang", 22);
		
		
		for (int i = 0; i < array2.length; i++) {
			array2[i].setArraycopyName(array1[i].name, array1[i].age); 
		}
		
		System.out.println(array1[0].name);
		System.out.println(array2[0].name);
		//결과 값 : hwang
		//hwang
		array2[0].setArraycopyName("han", 99);
		
		System.out.println(array1[0].name);
		System.out.println(array2[0].name);
		//결과 값 : lee
		//han
		
	}
}
#############################################################################################################################

[3] 향상된 for문과 배열
배열 for문 같은 경우 복잡하게 짜지말고 아래처럼 짜자!
배열의 처음과 끝까지 배열 요소 값을 순서대로 가져가서 변수에 대입함.
초기화와 종료 조건이 없기 때문에 모든 배열의 시작 요소부터 끝 요소까지 실행됨.
#############################################################################################################################
package 배열_3;

public class ForArray_4 {
	
	
	public static void main(String[] args) {
		String[] array1 = {"hwang", "lee", "kim"};
		
		for (String array : array1) {
			System.out.println(array);
			//결과 값 : hwang
			//lee
			//kim
			
		}
		
	}

}
#############################################################################################################################

4) 다차원 배열

1. 이차원 배열
int [][] arr = new int[2][3];
int [][] arr = {{1,2,3}, {4,5,6}};
이런식으로 선언할 수 있다.

배열의 length는 아래와 같이 표현 가능
array.length -> 행
array[0].length -> 열
#############################################################################################################################
package 배열_3;

public class Array2dimen_5 {
	
	public static void main(String[] args) {
		
		//초기화 방법 1
		int [][] array1 = new int[2][4];
		array1[0][0] = 1;
		
		//초기화 방법 2
		int [][] array2 = new int[][ ]{{1,2,3,4},{5,6,7,8}};
		
		//초기화 방법 3
		int [][] array3;
		array3 = new int[][] {{1,2,3,4},{5,6,7,8}};

		
		for (int i = 0; i < array2.length; i++) {
			
			for (int j = 0; j < array2[0].length; j++) {
				
				System.out.println(array2[i][j]);
				/*결과 값 : 1
2
3
4
5
6
7
8
*/
			}	
			
			
		}
				
		
	}

}

#############################################################################################################################

(2) ArrayList 클래스 사용

ArrayList 클래스의 주요 메소드
1. boolean add(E e) -> 요소 하나를 배열에 추가한다. (E는 요소의 자료형)
2. int size() -> 배열에 추가된 요소 전체 개수를 반환한다.
3. E get(int index) -> 배열의 index 위치에 있는 요소 값을 반환한다.
4. E remove(int index) -> 배열의 index 위치에 있는 요소 값을 제거하고 그 값을 반환한다.
5. boolean isEmpty()	-> 배열이 비어있는지 확인한다.

ArrayList 선언 방법
ArrayList<E> 배열 이름 = new ArrayList<E>();

1) 멤버 변수의 ArrayList
#############################################################################################################################
package 배열_3;

import java.util.ArrayList;

public class ArrayList_study_6 {
	
	public static void main(String[] args) {
		
		ArrayList<String> string1 = new ArrayList<String>();
		
		string1.add("hwang");
		string1.add("lee");
		string1.add("kim");
		
		for (int i = 0; i < string1.size(); i++) {
			string1.get(i);
			//결과 값 : 
			//hwang
			//lee
			//kim
		}
		
		for (String string : string1) {
			
			System.out.println(string);
			//결과 값 
			//hwang
			//lee
			//kim
		}
		
		
		
		
		
	}

}
#############################################################################################################################

2) 객체 변수의 ArrayList
#############################################################################################################################
package 배열_3;

import java.util.ArrayList;

public class ArrayList_6_1 {

	String name;
	int age;
	
	public ArrayList_6_1(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public static void main(String[] args) {
		
		ArrayList<ArrayList_6_1> arrayList1 = new ArrayList<ArrayList_6_1>();
		
		//인스턴스를 생성하여 arrayList1에 추가한다.
		arrayList1.add(new ArrayList_6_1("hwang", 22));
		arrayList1.add(new ArrayList_6_1("lee", 32));
		
		for (int i = 0; i < arrayList1.size(); i++) {
			ArrayList_6_1 arrayList = arrayList1.get(i);
			System.out.println(arrayList.name);
			System.out.println(arrayList.age);
			/*결과 값
			hwang
			22
			lee
			32
			 */
		}
			
		for (ArrayList_6_1 arrayList : arrayList1) {
			System.out.println(arrayList.name);
			System.out.println(arrayList.age);
			/*결과 값
			hwang
			22
			lee
			32
			 */
		}
		}
		
		
	}
#############################################################################################################################


