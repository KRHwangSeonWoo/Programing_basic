[9. 연산자 오버로딩 1]






1. 이항 연산자 오버로딩, operator 함수
객체끼리 연산자를 사용해서 더하거나 뺄 경우 우리가 정의한 함수를 호출한다.
이게 무슨 말이냐면 예를 들어 Student s1, s2를 선언하고 
s3 = s1 + s2이 가능하다는 말이다.

본래 의미하는 +....는 숫자의 연산이다. 이는 +를 사용하면 특정 함수를 호출하는 방식이다.
마찬가지로 우리는 객체를 인자값을 넣어 사용하기에 객체를 인자값으로 받아 로직을 수행하는 함수로 대체되는것이기에 우리는 이것을 연산자 오버로딩이라고 부른다.



(1) 클래스 연산자 오버로딩
Student s3 = s1 + s2 -> Student s3 = s1.operator+(s2)와 같은 의미이다.
즉, operator+라는 함수를 클래스에 정의해야지 사용 가능하다.
연산자 오버로딩은 operator +, - 등... 자신이 원하는 함수를 클래스에 정의하면 해당 객체의 클래스의 정의된 함수가 호출되는 방식이다.
(반드시 함수명은 operator + 연산자 식으로 정의해야 한다)
################################################################################
#include<iostream>

class Number {
public: 

	int number;

	Number(int number=1): number(number) {

	}
	/*
	
	*/
	Number operator + (const Number& num1) const {
		return Number(number + num1.number);
	}
};


int main() {

	Number num1;
	Number num2;

	Number num3 = num1 + num2;
	std::cout << num3.number;
}
################################################################################



(2) 전역 함수 연산자 오버로딩
Student s3 = s1 + s2일 경우, 자동으로 operator+ 함수를 호출한다.
매개변수는 operator+(s1, s2) 형식으로 들어간다. 
################################################################################
#include<iostream>

class Number {
public: 

	int number;

	Number(int number=1): number(number) {

	}


};

Number operator + (const Number& num1, const Number& num2) {
	return Number( num1.number + num2.number);
}


int main() {

	Number num1;
	Number num2;

	Number num3 = num1 + num2;
	std::cout << num3.number;
}
################################################################################








2. 단항 연산자 operator, 즉 객체 s1, 한개를 연산을 하는 것이다.
이것도 멤버 함수와 전역 함수 방식이 존재한다.

*멤버함수 방식: 매개변수를 받지 않는다.
*전역 함수 방식: 매개변수를 받는다. (자기 자신객체)
*후위연산인 경우 오버로딩할 매개변수에 int를 추가한다.




(1) 증감,감소 연산자 오버로딩
int 변수에 ++이나 --를 하면 1씩 증감한다.
하지만 객체에 ++와 --를 사용하게 한다면 어떻게하면될까?
마찬가지로 단항 연사자 오버로딩을 통해 진행하면 된다.


-> 1. 멤버 함수, 2. 전역함수를 통한 증감연산자 오버로딩

++(++num1) -> operator++(operator++(num1))

##############################################################################
#include<iostream>

class Number {
public:

    int number;

    Number(int number = 1) : number(number) {

    }


//////////////////멤버 함수 연산자 오버로딩////////////////////////////
    Number& operator++() {
        this -> number += 1;
        return *this;
    }
};
////////////////////////////////////////////////////////////////////////

//////////////////전역함수 연산자 오버로딩////////////////////////////
Number& operator++(Number& num1) {
    num1.number += 1;
    return num1;
}
//////////////////////////////////////////////////////////////////////////
int main() {
    Number num1;
    ++(++num1);
    std::cout << num1.number;
    //3
}
##############################################################################








(2) 전위증가와 후위증가의 구분
++연산자와 --연산자는 피연산자의 위치에 따라 의미가 달라진다.

ex) 전위증가
int b= 1;
int a = ++b; -> a에 b의 값을 넣고 b는 1 증가

ex) 후위증가
int b= 1;
int a = ++b; -> b에 1을 증가시키고 a에 값 대입


*** 단항연산자 연산자 오버라이딩의 전위증가와 후위증가 구분 방법
-> 연산자 오버라이딩할 매개변수에 "int"를 추가 (해당 int는 후위증가를 나타내는 방법이며 더이상의 매개변수의 의미는 없다)


***후위연산자 같은 경우  호출한 객체를 복사생성자를 이용하여 복사하여 생성한 객체를 임시적으로 생성한 후 실제로 호출한 객체의 num을 +1하고 임시로 만든 객체를 return한다.


***후위 연산자에 return을 const로 할경우 중복된 연산이 불가하다.
-> return의 형식이 const이기에 return되는 객체의 값을 수정하면 에러가 발생함 그렇기에 중복 연산이 불가하다.

############################################################
#include <iostream>

class Num {
public:
    int num;

    Num() : num(0) {}

    const Num& operator++() {
        this->num += 1;
        return *this;
    }

    const Num operator++(int) {
        Num temp(*this);
        this->num += 1;
        return temp;
    }
};

int main() {
    Num num1;
    Num num2;
    Num num3;

    num1 = ++num2;
    std::cout << num1.num;  // 출력: 1
    //(++num2).num = 20; 에러
  

    num1 = num3++;
    std::cout << num1.num;  // 출력: 0
    //(num2++)++ -> 에러


}
############################################################









3. 다른 자료형끼리의 연산
다른 자료형끼리의 연산자 오버라이딩을 통한 호출에서는 순서가 중요하다.
Num num2 = num1 + 20; 인 경우 num1.operator+(20)로 호출되기에 순서가 바뀌면
20.operator+(num1)로 해석되어 문제가 발생된다.
############################################################
#include<iostream>

class Num {
public:
	int num;
	
	Num() :num(0) {

	}

	Num& operator + (int num2) {
		this->num += num2;
		return *this;
	}
};


int main() {

	Num num1;
	Num num2 = num1 + 20;
	//Num num3 = 20 + num1; -> 에러
}
############################################################


-> 위 예제에서 순서를 굳이 바꾸고 싶다면 전역함수 연산자 오버라이딩으로 바꿔서 사용하면 된다.
 
############################################################
#include<iostream>

class Num {
public:
	int num;
	
	Num() :num(0) {

	}
};

Num& operator + (int num2, Num& num) {
	num.num += num2;
	return num;
}

int main() {

	Num num1;
	//Num num2 = num1 + 20;
	Num num3 = 20 + num1;
}
############################################################





4. <<, >> 연산자 오버로딩

iostream 클래스는 istream(입력) 클래스와 ostream(출력) 클래스를 다중 상속 받고 있다.
여기서 std::cout를 뜯어보면, std는 namespace이고 std는 출력을 담당하는 객체이다 (ostream 클래스의 객체)
즉 std::cout << 1;를 해석하면 std namespace의 cout 객체가 operator<<(1)을 실행하는 것과 같다 (std::cout.operator++(1))
즉 우측의 값을 인수로하는 연산자 오버로딩을 출력한다. 

ostream 클래스 내부
ostream& operator<<(int& val);
ostream& operator<<(unsigned int& val);
...처럼 인수에 따라 다른 함수가 호출이 된다.

이것을 우리는 오버로딩을 통해 재정의하려한다. 예를 들어 좌표를 가르키는 point 클래스를 만들어 우리가 만든 point 클래스의 좌표를 출력하는 로직을 만들려고 한다. 
이때 우리는 알다시피 멤버 함수와 전역함수를 이용하여 연산자 오버로딩을 할 수 있다.
근데 이경우 **전역함수로만 가능하다. -> 멤버함수를 통한 연산자 오버로딩을 하기 위해서는 ostream 클래스에 point 객체를 받는 함수를 추가하여야 한다. 하지만 ostream는 C++ 표준이기에 건들 수가 없어 오버로딩이 불가하기때문이다.
(istream도 동일하다)



[std::ostream에 Point 객체를 매개변수로 받는 함수가 없기에 전역 함수로 정의된 함수가 호출된다

############################################################
#include <iostream>

class Point
{
public:
    int x, y;

    Point() {};

    Point(int x, int y)
        : x(x), y(y)
    {}
};

std::istream& operator >> (std::istream& in, Point& point)
{
    in >> point.x >> point.y;
    return in;
}

std::ostream& operator << (std::ostream& out, const Point& point)
{
    out << "[ " << point.x << ", " << point.y << "]";
    return out;
}

int main() {
    Point p1;
    std::cin >> p1;
    std::cout << p1;

    return 0;
}

############################################################






*** 아래 코드에서 클래스 내부에 아래와 같이 operator << 함수가 멤버 함수로 오버로딩된 것처럼 보이지만 friend 함수로 정의되어 있다.
즉, operator << 함수는 클래스 멤버가 아닌 전역함수이며 단지 해당 friend함수가 String 클래스 내에 선언을 해줌으로써 해당 클래스의 멤버를 호출할 수 있도록 하는 것이다.
############################################################
#include <iostream>
#include <cstring>

class String {
private:
    char* str;

    // Constructor
    String(const char* s = nullptr) {
        if (s == nullptr) {
            str = new char[1];
            *str = '\0'; // Empty string
        }
        else {
            size_t len = strlen(s) + 1;
            str = new char[len];
            strcpy_s(str, len, s); // Copy input string
        }
    }

    // Destructor
    ~String() {
        delete[] str; // Release memory
    }

    // Overloading << operator as a non-member friend function
    friend std::ostream& operator<<(std::ostream& os, const String& s) {
        os << s.str;
        return os;
    }
};

int main() {
    String s("Hello, world!");
    std::cout << "String s: " << s << std::endl;
    return 0;
}
############################################################




