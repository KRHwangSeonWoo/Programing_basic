1. 표준 입출력









(1) printf() 함수
printf()는 모든 것을 문자형으로 반환함, 즉 printf("%d", a) 해도 a의 정수 값을 문자형으로 표현하여 출력한다고 보면됨.
%d.... 즉 포맷 스트링은 어떤 데이터로 변환할지 결정하는 것이다. -> 포맷스트링이랑 자료형이랑 미스매치나면 정상적으로 출력되지 않을 수 있다.

예) 
int a = 10;
int* ptr = &a;
printf("%d\n", ptr);
printf("%p", ptr);
/*
219937556
000000460D1BFB14
*/

ptr의 값은 같지만 어떤 포맷으로 출력할 것인지를 정하는것이 포맷스트링!
	


포맷 스트링
%d, %i (int) -> 10진수 (long long인 경우(int의 용량만으로 으로 출력이 불가능할 경우) %lld로 출력)
%o (int) -> 8진수로 출력
%x, %X (unsigned int) -> 부호가 없는 상태의 16진수 출력 (0x 출력 X)
%u (int) -> 부호가 없는 10진수로 출력 
%C (int) -> unsigned char로 변환한 후 문자 하나로 출력
%s (char *) -> 문자열을 출력. 
%f (double) - 고정 소수점 표기로 출력, x.x 형태로 출력이 가능 (%1.2f -> 정수 1의 자리, 소수 2의 자리까지 출력)
%e, %E (double) -> 지수로 출력
%g, %G (double) -> 고정 소수점 표기나 지수 표기중 선택하여 출력 
%p (void *) -> 포인터 형태로 출력
%n (int *) -> 대응되는 인수로 주어진 정수 포인터 위치에 현재까지 출력된 문자 개수를 저장함, 변환은 수행하지 않음




"unsigned를 사용하지 않고 int 형으로 4294967295 값을 담을 수 있는 이유는 int 자료형의 범위가 충분히 크기 때문입니다.

int 자료형은 보통 32비트로 구성되며, 부호 있는 정수 값을 표현하는 데 사용됩니다. 일반적으로 int 자료형은 -2,147,483,648부터 2,147,483,647까지의 값을 표현할 수 있습니다. 이 범위는 32비트를 사용하는 대부분의 컴퓨터 시스템에서 지원됩니다.

하지만 4294967295는 부호 없는 값이므로 unsigned int로 표현하는 것이 더 적절합니다. unsigned int 자료형은 0부터 4,294,967,295까지의 값을 표현할 수 있습니다. 이 범위는 4294967295를 포함하고 있기 때문에 unsigned int로 변수를 선언하는 것이 더 정확한 표현입니다.

그러나 int 자료형으로 4294967295 값을 담는 것은 일반적으로 문제가 되지 않습니다. int 자료형의 범위를 넘어서는 경우 값의 오버플로우가 발생하며, 오버플로우된 값은 맨 앞 비트로부터 해석됩니다. 

즉, int 자료형으로 4294967295 값을 담으면 -1로 해석되지만, 값 자체는 여전히 4294967295입니다. 따라서 값을 직접 비교하거나 연산하는 경우에는 주의해야 합니다. 만약 부호 없는 값에 관심이 있는 경우, unsigned int 자료형을 사용하여 명시적으로 표현하는 것이 좋습니다."



################################################################################################################################################
#include <stdio.h>
int main() {

	int a = 9223372036854775807;

	long long b = 9223372036854775807;

	printf("%d", a);
	//-1
	printf("%d\n", b);
	//-1

	printf("%lld\n", a);
	//4294967295 -> 정상적으로 출력되긴 함 (자신이 표현할 수 있는 반큼)
	printf("%lld\n", b);
	//9223372036854775807


	float c = 1.234564890;

	int d = 12;

	printf("%f\n", c);
	//1.234565 출력 -> 마지막에서 반올림!, default로 6자리까지 출력

	printf("%1.1f\n", c);
	//1.2 출력

	printf("%f", d);
	//0.000000 -> 타입이 미스매치나면 정상적으로 출력되지 않음!!!

	printf("%f", (float) d);
	//12.000000

}
#############################################################################################################################












(2) scanf 함수 
scanf 함수로 사용자로부터 값을 받을 수 있음.
처음 받을 때는 무조건 문자열로 받고, %d...를 선언하여 로 형변환 시켜준다.
또한 값을 받을 때 &를 사용하는데 &는 변수의 메모리 저장 주소를 가르킨다.

포맷 스트링

%d (int *) -> 10 진수
%i (int *) -> 8 진수 (0x로 시작(16진수) or 0으로 시작(8진수))
%o (int *) -> 8 진수 (0로 시작 or 아닐 수도 있음)
%x (int *) -> 16 진수 (0x(16진수)로 시작 or 아닐 수도 있음)
%u (unsigned int *) -> 부호 없는 10진수
%c (char *) -> 문자
%s (char *) -> 문자열 (공백 문자가 포함되지 않음) -> 아래 예제 확인
%e, f , g -> 부동소수점형 혹은  e, E를 포함한 지수로 표현

################################################################################################################################################
#include <stdio.h>
int main() {

	int a;

	scanf("%d", &a);
	//scanf으로 처음 받으면 무조건 문자열로 받아드린다. 이때 %d를 선언함으로 정수형으로 변환시켜주는 것이다.

	printf("%d", a);
}
################################################################################################################################################


################################################################################################################################################
#include <stdio.h>

#define BUFFER_SIZE 100

int main() {
    char buffer[BUFFER_SIZE];

    printf("문자열을 입력하세요: ");
    scanf_s("%s", buffer, sizeof(buffer));

    printf("입력된 문자열: %s\n", buffer);

    return 0;
}


//문자열을 입력하세요: hello word
//입력된 문자열: hello
################################################################################################################################################














(3) 문자 단위 입출력 getchar, putchar
문자형 관련 입출력 함수로 가장 기본적인 것이 getchar(), putchar()임.

################################################################################################################################################
#include <stdio.h>
int main() {

	char c;
	c = getchar();

	putchar(c);

	//a
	//a
}
################################################################################################################################################

