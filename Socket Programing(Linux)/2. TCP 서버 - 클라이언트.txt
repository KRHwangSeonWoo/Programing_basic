2. TCP 서버 - 클라이언트


1. TCP 서버 - 클라이언트 핵심 동작 과정

1) 서버는 클라이언트가 접속하기를 기다림 (listen)
2) 클라이언트는 서버에 접속 (connect)하고, 서버는 이 접속을 수용함 (accept)
3) 클라이언트는 서버에 데이터를 보내고 (send), 서버는 클라이언트가 보낸 데이터를 받아 처리함 (recv)
4) 서버는 처리한 데이터를 클라이언트에 보냄 (send)
5) 클라이언트는 서버가 보낸 데이터를 받아 처리함 (recv)
6) 데이터를 주고 받는 과정을 모두 마치면 접속을 끊음 (close)


2. TCP 서버 - 클라이언트 자세한 동작 원리

* 핵심 *
TCP 서버는 세션을 맺는 소켓따로 세션을 맺고 나서 클라이언트와 실질적인 데이터 통신을 하는 소켓 따로 있다.
소켓하나당 포트하나를 할당하는 것이 아니다. 하나의 포트안에 여러개의 논리적인 소켓을 할당할 수 있다.

1) 서버는 소켓을 생성한 후 클라이언트가 접속하기를 기다린다.
또한 서버가 사용하는 소켓은 특정 포트와 결합되어 있어 이 포트 번호로 접속하는 클라이언트만 수용할 수 있다.
2) 클라이언트가 서버에 접속한다. 이때 3 way 이후 패킷 교환이 일어난다.
3) 3 way 이후 서버는 접속한 클라이언트와 통신할 수 있는 새로운 소켓을 생성한다.
이 소켓을 이용하여 서버와 클라이언트는 데이터를 주고 받는다.
기존 소켓은 새로운 클라이언트 접속을 수용하는데 계속 사용한다.
4) 두 클라이언트가 접속할 경우, 서버에는 총 3개의 소켓이 생성된다. 2 소켓은 클라이언트와 통신할 때의 소켓이고
나머지 하나는 새로운 클라이언트와 TCP 3 way를 하기 위한 소켓이다.

* 일반적으로 하나의 클라이언트에 하나의 세션을 가질 수 있지만, 하나의 클라이언트에 여러 세션을 가질 수 있다.


3. TCP 서버 - 클라이언트 구현

서버(에코 서버): 클라이언트가 보낸 데이터를 받아서 (recv) 이를 문자열로 간주하여 화면에 출력한다 (print).
그런 다음 받은 데이터를 변경 없이 다시 클라이언트에 보낸다. (send)

클라이언트(에코 클라이언트): 사용자가 입력한 문자열을 서버에 보낸다 (send). 서버가 데이터를 그대로 돌려 보내면 이를 그대로 받아서 (recv) 화면에 출력한다. (printf)







[서버 코드]
##############################################################################################################
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//공통 코드
#include <sys/types.h> // basic type definitions
#include <sys/socket.h> // socket(), AF_INET, ...
#include <arpa/inet.h> // htons(), htonl(), ...
#include <netdb.h> // gethostbyname(), ...
#include <unistd.h> // close(), ...
#include <fcntl.h> // fcntl(), ...
#include <pthread.h> // pthread_create(), ...
#include <poll.h> // poll()
#include <sys/epoll.h> // epoll()

#include <stdio.h> // printf(), ...
#include <stdlib.h> // exit(), ...
#include <string.h> // strerror(), ...
#include <errno.h> // errno

// Windows 소켓 코드와 호환성을 위한 정의
typedef int SOCKET;
#define SOCKET_ERROR   -1
#define INVALID_SOCKET -1

// 소켓 함수 오류 출력 후 종료
void err_quit(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
	exit(1);
}

// 소켓 함수 오류 출력
void err_display(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
}

// 소켓 함수 오류 출력
void err_display(int errcode)
{
	char* msgbuf = strerror(errcode);
	printf("[오류] %s\n", msgbuf);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define SERVERPORT 9000
#define BUFSIZE 512




////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(){
	//소켓 생성
int sock = socket(AF_INET, SOCK_STREAM, 0);
if (sock == INVALID_SOCKET) {
	err_display("sock");
}

//bind()
struct sockaddr_in serverAddr;
memset(&serverAddr, 0, sizeof(serverAddr));
//serverAddr의 모든 멤버를 0으로 초기화
serverAddr.sin_family = AF_INET;
serverAddr.sin_port = htons(SERVERPORT);
serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
//INADDR_ANY는 0.0.0.0으로 모든 IP를 의미한다.

int retval = bind(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
//엥? 왜 2번째 인수 serverAdrr을 sockaddr로 형 변환하지?
//bind 함수에서는 const struct sockaddr *로 인자를 받기 때문에 형 변환해줘야 한다.
//엥? 근데 sockaddr과 sockaddr_in의 멤버가 다르잖아? 어떻게 해석할건데?
//형 변환을 할때 sockaddr과 sockaddr_in의 첫번째 멤버는 각각 sa_family와 sin_family이다.
//struct sockaddr_in은 struct sockaddr의 첫 멤버들이 동일하게 배열되어 있어서 호환이 가능하다.
//sockaddr_in의 첫 멤버인 sin_family는 sockaddr의 sa_family와 동일한 위치에 있고, 
// 따라서 캐스팅을 통해 두 구조체는 같은 메모리 레이아웃을 공유하게 된다.
//그렇기에 아래와 같이 IP 주소 체계에 따라 다르게 로직을 수행한다.
/*
	int bind(int sockfd, const struct sockaddr* addr, socklen_t addrlen) {
		// 내부적으로는 addr->sa_family 값을 보고 어떤 주소 체계인지 확인
		// addr->sa_family가 AF_INET이면, addr을 struct sockaddr_in으로 간주하고 처리
		if (addr->sa_family == AF_INET) {
			// IPv4 주소 체계 처리
			const struct sockaddr_in* addr_in = (const struct sockaddr_in*)addr;
			// addr_in을 사용하여 소켓을 바인딩
		}
		else if (addr->sa_family == AF_INET6) {
			// IPv6 주소 체계 처리
			const struct sockaddr_in6* addr_in6 = (const struct sockaddr_in6*)addr;
			// addr_in6을 사용하여 소켓을 바인딩
		}
		// 다른 주소 체계 처리 ...
	}
*/
//SOMAXCONN은 백로그 큐의 길이이다. 최대는 SOMACCONN으로 4096이다.
retval = listen(sock, SOMAXCONN);
if (retval == SOCKET_ERROR) {
	err_quit("bind()");
}


//데이터 통신에 사용할 변수
int clientSock;
struct sockaddr_in clientAddr;
socklen_t addrlen;
char buf[BUFSIZE];

while (1) {
	addrlen = sizeof(clientAddr);
	clientSock = accept(sock, (struct sockaddr*)&clientAddr, &addrlen);

	if (clientSock == INVALID_SOCKET) {
		err_display("accept()");
		break;
	}

	//접속한 클라이언트 정보 출력
	char addr[INET_ADDRSTRLEN];
	inet_ntop(AF_INET, &clientAddr.sin_addr, addr, sizeof(addr));
	printf("\n[TCP 서버] 클라이언트 접속: IP 주소=%s, 포트 번호=%d\n", addr, ntohs(clientAddr.sin_port));

	//클라이언트와 데이터 통신
	while (1) {
		//데이터 받기
		retval = recv(clientSock, buf, BUFSIZE - 1, 0);
		printf("%d", retval);
		if (retval == SOCKET_ERROR) {
			err_display("recv()");
			break;
		}
		else if (retval == 0) break;

		buf[retval] = '\0';
		printf("%s", buf);

		//데이터 보내기
		retval = send(clientSock, buf, retval, 0);
		if (retval == SOCKET_ERROR) {
			err_display("send()");
			break;
		}

	}

	close(clientSock);

}

close(sock);
}

##############################################################################################################





[클라이언트 코드]
[최대 512 바이트씩 전달하는 프로그램]
##############################################################################################################
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//공통 코드
#include <sys/types.h> // basic type definitions
#include <sys/socket.h> // socket(), AF_INET, ...
#include <arpa/inet.h> // htons(), htonl(), ...
#include <netdb.h> // gethostbyname(), ...
#include <unistd.h> // close(), ...
#include <fcntl.h> // fcntl(), ...
#include <pthread.h> // pthread_create(), ...
#include <poll.h> // poll()
#include <sys/epoll.h> // epoll()

#include <stdio.h> // printf(), ...
#include <stdlib.h> // exit(), ...
#include <string.h> // strerror(), ...
#include <errno.h> // errno

// Windows 소켓 코드와 호환성을 위한 정의
typedef int SOCKET;
#define SOCKET_ERROR   -1
#define INVALID_SOCKET -1

// 소켓 함수 오류 출력 후 종료
void err_quit(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
	exit(1);
}

// 소켓 함수 오류 출력
void err_display(const char* msg)
{
	char* msgbuf = strerror(errno);
	printf("[%s] %s\n", msg, msgbuf);
}

// 소켓 함수 오류 출력
void err_display(int errcode)
{
	char* msgbuf = strerror(errcode);
	printf("[오류] %s\n", msgbuf);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* SERVERIP = "127.0.0.1";
#define SERVERPORT 9000
#define BUFSIZE 512


int main() {
	int retval;

	//소켓 생성
	SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == INVALID_SOCKET) err_quit("sock()");
	
	//connect()
	struct sockaddr_in serverAddr;
	memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	inet_pton(AF_INET, SERVERIP, &serverAddr.sin_addr);
	serverAddr.sin_port = htons(SERVERPORT);
	retval = connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if (retval == INVALID_SOCKET) err_quit("connect()");

	char buf[BUFSIZE + 1];
	int len;

	while (1) {
		printf("보낼 데이터\n");

		//엔터를 누르면서 줄바꿈까지 포함됨 예를 들어 a + enter => a + \n => buf의 크기를 구하면 2바이트 출력됨
		//fgets 특성상 마지막 문자열에 NULL을 추가함, 즉 buf[513](BUFSIZE + 1)에 반드시 NULL이 추가됨 (버퍼 사이즈를 513으로 지정했기 때문) 그렇기에 strlen을 이용하여 문자열의
		// 크기를 구할 때 최대가 512임 
		if (fgets(buf, BUFSIZE + 1, stdin) == NULL) break;
		
		//a를 입력하면 \n까지 합쳐서 len의 값이 2가 됨, 
		len = strlen(buf);
		printf("%d\n", strlen(buf));
		
		//버퍼의 크기가 512 미만인경우, \n 문자가 추가되어 해당 문자를 NULL로 교체, 
		// 512 이상인 경우 \n 문자가 삽입되지 않아 NULL 값 넣음
		if (sizeof(buf) == BUFSIZE) {
			buf[len] = '\0';
		}
		else {
			buf[len - 1] = '\0';
		}
		
		retval = send(sock, buf, strlen(buf) + 1, 0);
		if (retval == SOCKET_ERROR) {
			err_display("send");
			break;
		}

		printf("총 %d바이트를 보냈습니다.\n", retval);

		retval = recv(sock, buf, retval, MSG_WAITALL);
		printf("방금 %d바이트를 받았습니다..\n", retval);


		buf[retval] = '\0';
		printf("%s\n", buf);

		
	}
	close(sock);

}
##############################################################################################################
