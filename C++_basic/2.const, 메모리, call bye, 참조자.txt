1. const 의미

***const(*ptr3 상수화 즉 &a가 가르키는 값 상수화) int * const(&a 주소를 상수화) ptr3 = &a;

#############################################################################
#include<iostream>

int main() {

    const int a = 10;
    // a = 20; // 에러: const 변수의 값을 수정할 수 없습니다.

    int b = 20;
    int c = 30;

    const int* ptr1 = &b;
    ptr1 = &b; // 가능: ptr1은 상수 정수를 가리키는 포인터이므로 다른 상수 정수를 가리키도록 할 수 있습니다.
    //*ptr1 = 3;

    int* const ptr2 = &b;
    //ptr2 = &c;
    *ptr2 = 30;



    const int* const ptr3 = &a;
    //ptr2 = &a; // 에러: const 포인터를 수정할 수 없습니다.
    //*ptr2 = 3; //에러

}
#############################################################################




2. 메모리 

데이터: 전역변수가 저장되는 영역
스택: 지역 변수, 매개변수가 저장되는 영역
힙: malloc 함수 호출에 의해 프로그램이 실행되는 과정에서 동적으로 할당이 이루어지는 영역

malloc & free: malloc으로 할당된 메모리는 free함수 호출을 통해 소멸하지 않으면 해제되지 않음



3. call by value, call by reference

#############################################################################
#include<iostream>

void CallByValue(int a, int b) {
	int c = b;
	a = b;
	b = c;
}

void CallbyRefer(int* a, int* b) {
	int temp = *b;
	*b = *a;
	*a = temp;


}

int main() {
	int a = 1, b = 2;
	CallByValue(a, b);
	std::cout << a << "  " << b << std::endl;
	
	CallbyRefer(&a, &b);
	std::cout << a << "  " << b << std::endl;

}
#############################################################################
1  2
2  1 



4. bool의 의미
bool은 1 byte 데이터이다. 즉 0, 1만을 표현할 수 있음
0은 False, 1은 True를 의미함
#############################################################################
#include<iostream>

int main() {

	std::cout << true << std::endl;
	std::cout << false << std::endl;
	std::cout << sizeof(true) << std::endl;
	std::cout << sizeof(false) << std::endl;
}
#############################################################################



5. 참조자의 이해

우선 변수는 메모리 공간에 붙여진 "이름(별칭)"임 
이 이름을 통해 같은 메모리를 바라보는 또 다른 별칭?를 선언할 수 있음
이때 참조자를 선언을 통해 이를 가능하게 할 수 있음

int &num = num1; 이런식으로 가능함

*** &의 두가지 의미
1. 선언된 변수의 & (int * ptr = &num): 해당 변수의 주소값 반환
2. 선언되는 변수의 &(int &num = num1): 변수 num1에 대한 참조자 num을 선언해라

그럼 변수와 참조자는 같은 걸까?
변수로 봐도 무리는 없지만 C++에서는 분리해서 보고있음
즉 변수를 참조하여 생성된 참조자는 참조라라는 별도의 이름을 가진다.


#############################################################################
#include<iostream>

int main() {

	int num1 = 10;
	int &num = num1;
	std::cout << num1 << "     " << num << std::endl;

}
#############################################################################
10     10




(1) 참조자는 별칭이다.
C++에서는 참조자를 변수에 별칭을 지어주는 것이라고 봄
그렇다!!! 참조자는 변수의 또 다른 이름을 지어준다고 보자!
무조건!!! 선언과 동시에 변수를 참조하도록 해야한다.



