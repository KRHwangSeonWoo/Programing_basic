3. 파일 입출력

#파일은 크게 일반 파일과 특수 파일로 구분됨.
일반 파일: 텍스트나 바이너리 형태의 자료를 저장하는 파일
특수 파일: 데이터 전송 또는 장치 접근에 사용하는 파일

#파일을 읽고 쓰는 방법은 저수준 파일과 고수준 파일 입출력으로 구분됨.
1. 저수준 파일: 리눅스 커널 의 시스템 호출을 이용해 입출력 수행(바이트 단위)
[특징]
빠름
파일 기술자(파일 스크립터)를 사용
특수 파일에 대한 접근 가능
[단점]
바이트 단위로 입출력을 수행하므로 이를 이용해 응용 프로그램을 작성하려면 바이트를 적당한 형태의 데이터로 변환하는 여러 가지 기능을 함수로 추가 구현해야 하는 단점이 있음.


2. 고수준 파일: C 언어의 표준 함수로 제공(버퍼 단위)
[특징]
파일 포인터를 사용
데이터를 바이트 단위로 한정하지 않아 한번에 읽기와 쓰기를 수행함.
다양한 입출력 데이터 변환 기능도 이미 구현되어 있어 자료형에 따라 편리하게 이용가능
[단점]
느림  











                        
(1) 저수준 파일 입출력
모든 저수준 파일 입출력 함수는 파일 기술자를 사용함.
파일 기술자는 파일을 구분할 목적으로 시스템에서 붙여놓은 번호임. 해당 번호를 통해 파일을 컨트롤함.

[파일 기술자]
0: 표준 입력
1: 표준 출력
2: 표준 오류 출력
3: 3부터 순서 대로 할당함


1. 파일 생성과 닫기

[flags]
O_RDONLY
읽기 전용으로 열기
O_WRONLY
쓰기 전용으로 열기
O_RDWR
일기/쓰기 전용으로 열기
O_CREAT
해당 파일이 없으면 파일 생성
O_EXCL
해당파일 있으면 에러 발생, 파일 열지 않음
O_TRUNC
해당 파일 존재 하면 파일 내용 모두 지움
O_APPEND
쓰기 동작 시 파일에 끝에 추가됨
O_NOCTTY
첫 인수 pathname이 터미널이면 이 터미널을 프로그램의 제어 터미널로 할당하지 않음
O_NONBLOCK
FIFO, 블록 특수파일, 문자 특수파일 등에서 입출력을 할 경우 읽거나 쓸 내용이 없더라도 장치가 준비, 사용 가능 하게 되는 것을 기다리지 않고 -1 반환
O_SYNC
쓰기 동작시 물리적인 쓰기 동작 완료될 때까지 기다림.




1) open() 파일 열기
int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode); -> O_CREAT 플래그를 사용할 경우 파일의 권한 설정 가능
################################################################################################################
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    //쓰기 전용으로 열 떄 (이미 파일이 있을 경우)
    open("hi.txt", O_TRUNC);

    //생성 후 쓰기 전용으로 열기 (파일이 없을 경우)
    open("hi.txt", O_WRONLY | O_CREAT);

    //파일이 없을 경우 생성 후 쓰기 전용으로 열기, 권한 644 부여
    open("hi_test.txt", O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);


}
[root@localhost ~]# ./a.out 
[root@localhost ~]# ls -al | grep hi_test.txt 
-rw-r--r--.  1 root root     0 Nov  1 19:43 hi_test.txt
################################################################################################################









2) create() 파일 생성
open 함수에 파일 생성 긴응이 없던 구 버전 유닉스에서 사용된 것임.
int creat(const char *pathname, mode_t mode);







3) 파일 닫기: close()
int close(int fd);
파일 입출력 작업을 완료하면 반드시 파일을 닫아야 한다. 한 프로세스가 열수 있는 파일 개수에 제한이 있기에 파일을 제대로 닫지 
않으면 최대 허용 개수를 초과해 더 이상 파일을 열지 못할 수 있다. (ulimit -n 명령어로 확인가능)

close 함수는 성공 시 0, 실패 시 -1 return함
 









