[9. 연산자 오버로딩 1]






1. 이항 연산자 오버로딩, operator 함수
객체끼리 연산자를 사용해서 더하거나 뺄 경우 우리가 정의한 함수를 호출한다.
이게 무슨 말이냐면 예를 들어 Student s1, s2를 선언하고 
s3 = s1 + s2이 가능하다는 말이다.

본래 의미하는 +....는 숫자의 연산이다. 이는 +를 사용하면 특정 함수를 호출하는 방식이다.
마찬가지로 우리는 객체를 인자값을 넣어 사용하기에 객체를 인자값으로 받아 로직을 수행하는 함수로 대체되는것이기에 우리는 이것을 연산자 오버로딩이라고 부른다.



(1) 이항 연산자 operator, 즉 객체 s1, s2를 가지고 연산하는 것이다.


1) 클래스 연산자 오버로딩
Student s3 = s1 + s2 -> Student s3 = s1.operator+(s2)와 같은 의미이다.
즉, operator+라는 함수를 클래스에 정의해야지 사용 가능하다.
연산자 오버로딩은 operator +, - 등... 자신이 원하는 함수를 클래스에 정의하면 해당 객체의 클래스의 정의된 함수가 호출되는 방식이다.
(반드시 함수명은 operator + 연산자 식으로 정의해야 한다)
################################################################################
#include<iostream>

class Number {
public: 

	int number;

	Number(int number=1): number(number) {

	}
	/*
	
	*/
	Number operator + (const Number& num1) const {
		return Number(number + num1.number);
	}
};


int main() {

	Number num1;
	Number num2;

	Number num3 = num1 + num2;
	std::cout << num3.number;
}
################################################################################



2) 전역 함수 연산자 오버로딩
Student s3 = s1 + s2일 경우, 자동으로 operator+ 함수를 호출한다.
매개변수는 operator+(s1, s2) 형식으로 들어간다. 
################################################################################
#include<iostream>

class Number {
public: 

	int number;

	Number(int number=1): number(number) {

	}


};

Number operator + (const Number& num1, const Number& num2) {
	return Number( num1.number + num2.number);
}


int main() {

	Number num1;
	Number num2;

	Number num3 = num1 + num2;
	std::cout << num3.number;
}
################################################################################








(2) 단항 연산자 operator, 즉 객체 s1, 한개를 연산을 하는 것이다.





1) 증감,감소 연산자 오버로딩
int 변수에 ++이나 --를 하면 1씩 증감한다.
하지만 객체에 ++와 --를 사용하게 한다면 어떻게하면될까?
마찬가지로 단항 연사자 오버로딩을 통해 진행하면 된다.




1) 전역함수를 통한 증감연산자 오버로딩
++(++num1) -> operator++(operator++(num1))
*아래 예제에서는 operator의 return을 참조자가 아닌 임시객체로 줌 -> 두번째 operator가 수행되고
임시객체를 참조자로 받으니 
##############################################################################
#include<iostream>

class Number {
public:

    int number;

    Number(int number = 1) : number(number) {

    }
};

Number operator++(Number& num1) {
    num1.number += 1;
    return num1;
}

int main() {
    Number num1;
    ++(++num1);
    std::cout << num1.number;
    //3
}


C++ 표준은 임시 객체를 비 const 참조로 전달하는 것을 허용하지 않는데, 이는 여러 이유가 있습니다.









#include<iostream>

class Number {
public:
	int num;

	Number returnMyself() {
		return *this;
	}

	Number showNumber(Number& num) {
		std::cout << num.num;
	}


};

int main() {
	Number n1;

	n1.showNumber(n1.returnMyself());
}



const를 붙이지 않거나 참조자를 빼면 에러 X




임시객체 특성 상 동작중인 라인 이후에는 메모리에 소멸됨
근데 임시객체를 const가 없는 참조자형으로 매개변수로써 받는경우 모순이 발생함 -> 너 이거 로직끝나면 메모리가 해체되잖아? 근데 왜 참조자로 받고 값을 수정할 수 있게해?

