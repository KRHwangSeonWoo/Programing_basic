[6. friend와 static 그리고 const 객체]




1. const 객체
const는 변경을 불가하도록 상수화 시키는 것이다.
const int a = 10;와 같이 객체도 상수화 시킬 수 있다.

const Student s1; 이런식으로 말이다.
또한 const로 선언된 객체는 const 멤버 함수만 호출이 가능하다.
변경 시킬 우려를 아예 차단한는 것이다.

[const 객체는 const 멤버 함수만을 호출할 수 있다]

*****************헷가리는 거 정리*****************
const 객체 vs const 멤버변수를 가지고 있는 객체

const 객체는 const 멤버함수만 호출이 가능하다 (const 객체는 초기화된 멤버변수를 가지지 않아도 컴파일러는 이경우를 허용한다는 결과가 나옴) 
const 멤버변수를 가지고 있는 객체는 만드시 선언과 동시에 초기화해야함 -> 헷가리면 멤버 이니셔라이즈의 const 멤버변수 초기화 참고

#######################################################
#include<iostream>

class Student {
public:
    int age;
    
    Student(int age) 
        :age(age){

    }

    void printAge()  {
        std::cout << age;
    }

    void printAge() const {
        std::cout <<"const" << age;
    }
};

int main() {
    const Student s1;
    std::cout << s1.age;

    s1.printAge(); 
    //const 10

    
}

#######################################################


함수의 const 객체 반환
[const로 반환된 객체로 값을 변경 시 에러나는 예제]
#######################################################
#include <iostream>

class ConstObject {
public:
	int age;

	const ConstObject& operator++() {
		this->age += 1;
		return *this;
	}

};

int main() {
	ConstObject obj1;
	obj1.age = 10;

	++(++obj1); // -> 에러

}
#######################################################













2. friends 선언
A 클래스, B 클래스 두개가 있다고 가정할고 B클래스가 private 멤버변수를 가지고 있을 때
A클래스가 B클래스의 private 멤버변수에 접근할 수있도록 하는 것이다. (public도 당연히 접근 가능)

frined 선언 순서
A를 통해 B의 private 멤버변수를 확인하고자 할때
1. B 클래스에 A 클래스 friend 선언
2. A 클래스에서 B클래스 객체를 인자값으로 받고, B클래스 private 멤버변수 접근하는 함수 선언

*자기자신 class 메소드가 private 멤버변수에 접근하는 함수로 쓰는 건 당연히 되는거라 firend가 의미가 없음

#######################################################
#include<iostream>

class Girl {
private:
    int Girl_secret = 20;
    friend class Boy; // Boy 클래스를 friend로 선언
};


class Boy {
public:
    void girlPrint(Girl g1) {
        std::cout << g1.Girl_secret;
    }
};


int main() {
    Boy b1;
    Girl g1;
    b1.girlPrint(g1);

    return 0;
}
#######################################################










3. static 멤버변수

우선 C에서의 static 변수의 의미를 정리하자.
전역변수에 선언된 static의 의미
-> 선언된 파일 내에서만 참조를 허용하겠다는 의미
• 함수 내에 선언된 static의 의미
-> 한번만 초기화되고, 지역변수와 달리 함수를 빠져나가도 소멸되지 않는다.



#객체의 static 멤버변수는?
만약 해당 생성자를 호출하면 (객체가 생성되면) 몇번째 객체인지 출력하는 프로그램을 구현하려고 한다.
이때 중요한 로직은 아래와 같다.
-> 같은 클래스로 만들어진 객체가 같은 멤버변수를 바라보아야 한다. (생성자를 호출할 때마다 1씩 증가해야하기 때문)

이것이 어떻게 가능할까?? 객체는 기본적으로 자기 자신 객체에 할당된 메모리에 접근이 가능한데... 이걸 모두가 공유한다고?

결론을 말하지면 객체 내의 s1, s2, s3객체가 있다고 가정할 때 static 멤버변수는 각 객체에 저장된 것이아니다.
static 변수는 객체 외부에 있고, 해당 객체에 접근 권한을 준것뿐이다. 그렇기에 static 멤버변수에 대한 객체의 정보 공유가 가능했던 것이다.

[static 멤버 변수의 초기화]
************************************************************************************************************
static 멤버 변수는 모든 객체가 공유해야 하므로 프로그램 전체 영역에서 메모리 유지가 되야 한다. 따라서 반드시 전역 범위에서 정의 및 초기화를 해주어야 한다
또한 static 멤버변수는 객체가 생성될 때 선언되는 변수가 아닌, 이미 메모리 공간에 할당이 이루어진 변수이기에 class 내에서 정의하면 안됨
따라서 static 멤버 변수는 main 함수는 물론이고 생성자 안에서도 초기화 할 수 없다.
생성자도 static여야 static 멤버 변수를 초기화시킬 수 있는데 C++에서는 static 생성자를 지원하지 않는다.

public이든 private이든 초기화 시 접근이 가능하다.
초기화 이후 private static 멤버변수를 사용하기 위해서는 객체를 통해 접근해야한다.
************************************************************************************************************

##############################################################################################################
#include<iostream>

class Student {
    static int sequence;
public:
    Student() {
        sequence++;
        std::cout << sequence << "째 객체입니다. \n";
    }

    Student(const Student& s) {
        sequence++;
        std::cout << sequence << "째 객체입니다. (복사 생성자)\n";
    }
    
    Student StudentReturn(Student s) {
        sequence++;
        std::cout << sequence << "째 객체입니다. (복사 생성자)\n";
        
        return s;
    }


};

int Student::sequence = 0;

int main() {
    Student s1;
    //1째 객체입니다. (복사 생성자)
    Student s2;
    //2째 객체입니다. (복사 생성자)
    Student s3 = s1;
    //3째 객체입니다. (복사 생성자)
    Student s4 = s3.StudentReturn(s2); // -> 헷가리면 복사 생성자 다시 봐라
    //4째 객체입니다. (복사 생성자) -> Student s4(임시객체)
    //5째 객체입니다. (복사 생성자) -> 매개변수 시 객체 
    //6째 객체입니다. (복사 생성자) -> return (임시객체)
    return 0;
}
##############################################################################################################




3-1) static 멤버변수의 직접 호출
public static 멤버 변수인 경우, 클래스에 직접 호출을 통해 사용이 가능하다.
이는 객체에 static 멤버변수가 아니기에 가능한 것이다.

private static 멤버변수인 경우 객체를 생성하여 메소드를 통해 호출하는 것만이 가능하다. (당연한 얘기)
##############################################################################################################
#include<iostream>

class Student {
private:
    static int staticPrivate;

public:
    static int staticPublic;


    int returnPrivate (){
        return staticPrivate;
    }
};

int Student::staticPrivate = 10;
int Student::staticPublic = 20;


int main() {
    //std::cout << Student::staticPrivate; -> 에러
    Student s1;
    std::cout << s1.staticPublic;
    //20
    std::cout << Student::staticPublic;
    //20
    std::cout << s1.returnPrivate();
    //10
}
##############################################################################################################










4. static 멤버 함수
static 멤버변수와 별 차이가 없다.

1) 선언된 클래스의 모든 객체가 공유한다.
2) public으로 선언되면, 클래스의 이름을 이용해서 호출이 가능하다.
3) 객체의 멤버로 존재하는 것이 아닌다.

***특이한 점은 static 멤버 함수는 static 멤버변수만을 호출할 수 있다는 점이다!!
-> 왜그럴까?
1) 객체 생성 이전에도 호출이 가능한 함수에서 어떻게 객체의 멤버변수에 접근이 가능하겠느냐
2) 객체의 멤버가 아닌데, 어떻게 멤버변수에 접근하겠는가
3) 멤버변수에 접근한다고 치자, 그러면 어떤 객체의 멤버변수에 접근을 하겠는가

##############################################################################################################
#include<iostream>

class Student {
	public:
		int age;
		static int staticAge;

	static void getAge() {
		//std::cout << age; ->  에러
		std::cout << staticAge;

	}


};
##############################################################################################################






5. const static 멤버
static 멤버변수로 선언한 경우, 클래스 내에서 초기화하면 에러가 발생함
-> static 멤버는 객체 내에 저장된 것이 아니라 객체 외부에 저장되기에 객체 생성을 하여야 값이 할당되는 클래스 내부에 정의되는 것이 아닌,
외부에서 초기화 되어야 한다는 것임

하지만 const static 멤버 변수는 class 내에서 초기화가 가능하다.
-> 왜냐면 const 키워드로 인해 컴파일될 때 메모리에 할당되기 때문이다.
그렇기에 class 내에 const static 멤버를 선언하고 초기화한다는 것은 객체 생성 이전 컴파일될 때 메모리가 할당되기에
클래스 내부에서 초기화해도 상관이 없다는 결론이 나온다.
##############################################################################################################
#include<iostream>

class Student {
public:
    int age;
    static const int staticAge = 20;

    static void getAge() {
        std::cout << staticAge;
    }
};

int main() {
    std::cout << Student::staticAge;

}
##############################################################################################################






6. const 무효화시키는, mutable
const 함수는 멤버변수의 변경을 막는다.
하지만 mutable로 선언된 멤버 변수같은 경우 예외적으로 값의 변경이 허용된다.
##############################################################################################################
#include<iostream>

class Student {

public: 
	 mutable int age;

	void setAge(int age) const {
		this->age = age; 
	}

};
##############################################################################################################

