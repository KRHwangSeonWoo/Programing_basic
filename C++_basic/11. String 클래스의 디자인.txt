[String 클래스의 디자인]




1. 표준 String 클래스
String 클래스는 std namesapce 내에 지정된 클래스이기에 std를 명싱해야 함 (아니면 using namespse std를 선언하던가)
########################################
#include <iostream>
#include <string>

using namespace std;

int main() {
    std::string s1 = "abc";
    string s2 = "abc";

    std::cout << s1;
}

########################################





2. 표준 String 클래스의 분석

1) 문자열 하나로 받는 생성자의 정의
string str1 = "ABC";
-> string str1("ABC")와 동일하다, 즉 string 클래스에 이에 적절한 생성자가 정의되어 있다는 것이다.

2) 생성자, 소멸자, 복사 생성자, 대입 연산자
String 클래스로 문자열을 저장할 때 메모리 공간을 동적으로 할당하기에 소멸자를 정의되어 있다.
또한 깊은 복사를 하는 복사 생성자와 대입 연산자까지 정의되어 있다.

3) 결합된 문자열로 초기화된 객체를 반환하는 + 연산자 오버로딩
string str3 = str1 + str2가 가능하다. 이는 str1.operator+(str2)와 같은 이야기이며 이 두개의 문자열이 합쳐진 것을 return하는 로직이 정의 되어 있다.

4) 문자열을 덧붙이는 += 연산자 오버로딩
str1+=str2;가 동작하도록 += 오버로딩이 정의되어 있다.

5) == 연산자 오버로딩
if(str1==str2)에서 str1과 str2의 문자열이 동일한지를 판단하는 여부를 return하는 로직이 정의되어 있다.

6) 콘솔 입출력이 가능한 <<, >> 연산자 오버로딩


=> String 클래스와 동일한 로직을 수행하는 custom 클래스를 정의하여 String 클래스를 구현해보겠다.


