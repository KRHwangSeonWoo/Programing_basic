[4. 고수준 파일 입출력]

저수준 파일 입출력은 바이트 단위로만 칩출력을 수행하므로 읽은 데이털르 가공하는 추가 작업이 필요함.
하지만 고수준 파일 입출력에는 "문자 단위", "행 단위", "버퍼 단위", 형식 기반 입출력" 등이 편리하게 제공하므로 프로그램에 맞게 사용 가능함.

#저수준 파일 입출력 시에는 파일 디스크립터(정수형)을 사용했지만, 고수준에서는 파일 포인터를 사용한다.




1. 파일 열기와 닫기


(1) 파일 열기, fopen()
File * fopen(const char *pathname, const char *mode)

* 두번째 인자인 mode 종류
r: 읽기 전용
w: 쓰기 전용, 기존 내용 삭제
a: 기존 내용의 끝에 추가해서 쓰기 용으로 텍스트 파일을 열음
rb: 읽기 전용으로 바이너리 파일을 열음
wb: 새로 쓰기 전용으로 바이너리 파일을 연다. 기존 내용은 삭제됨.
ab: 추가해서 쓰기용으로 바이너리 파일을 열음
?+: 읽기와 쓰기용으로 텍스트 or 바이터리 파일을 열음

(2) 파일 닫기, fclose()
int fclose()
파일 닫기를 정상적으로 완료하면 0, 오류가 발생하면 EOF(-1)를 return









2. 문자 기반 입출력
문자 기반 입출력의 함수에서는 저수준 처럼 바이트 단위로 입출력을 수행한다.
문자 하나 하나 입출력!


(1) 문자 단위 입력함수
아래 함수는 문자열 하나씩 읽고 오프셋을 하나씩 이동하여 while을 통해 읽을 수 있도록한다.
정수를 반환하는데 이는 아스키 코드에 매치되어 해당 문자 반환을 한다.
int fgetc(File *stream)
int getc(File *stream)
int getchar(void)
int getw(File *stream)

(2) 문자 단위 출력 함수
해당 정수의 값을 아스키 코드에 매치하여 파일에 쓴다.
int fputc(int c, FILE *stream)
int putc(int c, FILE *stream)
int putchar(int c)
int putw(int c, FILE *stream)


#############################################################################
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <stdio.h>

int main() {
    FILE *rfp, *wfp;
    int c;

    rfp = fopen("hi.txt","r");
    wfp = fopen("bye.txt","r+");

    while((c = fgetc(rfp)) != EOF){
        printf("c의 정수 값: %d\n",c);
        printf("c의 문자 값: %c\n",c);
        fputc(c, wfp);

    }
}
[root@localhost ~]# ./a.out 
c의 정수 값: 104
c의 문자 값: h
c의 정수 값: 101
c의 문자 값: e
c의 정수 값: 108
c의 문자 값: l
c의 정수 값: 108
c의 문자 값: l
c의 정수 값: 111
c의 문자 값: o
c의 정수 값: 32
c의 문자 값:  
c의 정수 값: 119
c의 문자 값: w
c의 정수 값: 111
c의 문자 값: o
c의 정수 값: 114
c의 문자 값: r
c의 정수 값: 108
c의 문자 값: l
c의 정수 값: 100
c의 문자 값: d
c의 정수 값: 10 -> 개행문자이다. 파일에 자동으로 삽입되는 듯하다.
c의 문자 값: 

[root@localhost ~]# cat bye.txt 
hello world
#############################################################################


****************************************************************************
문자열 기반(fgets) VS 버퍼 기반(fread)
출력은 비슷비슷함! -> 상관쓰지 말자!
****************************************************************************
#문자열 기반(fgets)#
fgets -> 파일의 끝이나 개행 문자까지 읽음, 지정한 크기 n -1 byte까지 읽고 마지막 문자열에 NULL 추가
#버퍼 기반(fread)#
fread -> 지정한 사이즈까지 읽음, 만약 문자열로 사용하고 싶다면 buf 사이즈를 읽을 사이즈에 +1하여
생성하고 수동으로 NULL을 추가하여 사용해야 함
또한 이 함수는 바이너리 파일을 읽을 때 주로 사용되는 함수임
****************************************************************************


3. 문자열 기반 입출력


(1) 문자열 기반 입력, fgets() -> 파일의 개행문자 즉 줄 단위로 읽어 들임
char *gets(char *s)
gets() 함수는 표준 입력에서 문자열을 읽음
보안이 취약하여 사용을 하지 않는 것이 좋음!

char *fgets(char *s, int size, FILE *stream)
파일 포인터가 가르키는 파일에서 변수 size에 지정한 길이보다 하나 적게 문자열을 읽어 s에 저장한다.
개행 문자나 파일의 끝을 만나면 해당 지점까지 읽어온다!
그후 버퍼의 가장 뒤에는 자동으로 NULL을 삽입한다.




(2) 문자열 기반 출력, puts(), fputs()
int puts(const char *s)
문자열 그대로 표준 출력한다.
이때 개행문자를 추가하여 출력!


int fputs(const char *s, FILE *stream)
문자열을 지정한 파일 포인터가 가르키는 곳에 쓴다.
출력할 때 개행문자를 출력하지 않는다.

[문자열 단위로 fgets로 파일의 내용을 읽고 fputs로 파일에 쓰기]
#############################################################################
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <stdio.h>

int main() {

FILE *rfp, *wfp;
char buf[BUFSIZ];

rfp = fopen("hi.txt", "r");
wfp = fopen("bye.txt", "w");


fgets(buf, BUFSIZ, rfp);
fputs(buf, wfp);

fclose(rfp);
fclose(wfp);

}
[root@localhost ~]# cat hi.txt 
1234
1234
1234
[root@localhost ~]# cat bye.txt 
[root@localhost ~]# ./a.out 
[root@localhost ~]# cat bye.txt 
1234
#############################################################################


#############################################################################
#include <stdio.h>
int main(void)
{
    char str1[10];
    char str2[10];

    fputs("Type sentence1 : ", stdout);
    fgets(str1, sizeof(str1), stdin); //null문자 제외 문자 10개 저장 가능

    fputs("Type sentence2 : ", stdout);
    fgets(str2, sizeof(str2), stdin); //null문자 제외 문자 10개 저장 가능

    printf("sentence1 : %s\n", str1);
    printf("sentence2 : %s\n", str2);

    return 0;
}
[root@localhost ~]# ./a.out 
Type sentence1 : 123456789
Type sentence2 : sentence1 : 123456789
sentence2 : 

[root@localhost ~]# 
#############################################################################

null문자 포함 10개의 문자를 str1에 저장하고 이어서 str2에도 문자열을 저장하려 했는데. 두 번째 문자열은 저장할 기회조차 없었습니다.

사실 우리가 처음 입력한 문장은 엔터키를 치는 것까지 포함하여 "123456789\n" 입니다. 
\n이 입력되는순간(엔터키를 치는 순간) 버퍼로 123456789\n이 이동되고 fgets 함수는 입력버퍼에서 123456789 9개만 읽어들이고 마지막 하나는 null문자로 채웁니다. 
그럼 버퍼에 아직 \n이 남아있는겁니다. 이어서 두 번째 fgets 함수가 실행되면 아직 버퍼에 \n이 남아있는것을 보고 바로 가져와서 str2에 저장합니다. str2에는 \n이 저장되어 있는겁니다. 
따라서 마지막 문장 sentence2 : 다음에는 printf문에 포함된 \n에 의해 한 번, str2에 저장된 \n이 %s를 통해 또 한 번 출력이 되어 개행이 총 두 번 이뤄진겁니다.






4. 버퍼 기반 입출력
고수준 파일 입출력에서는 한 번에 칩출력하는 버퍼의 크기를 지정해 버퍼 단위로 파일 입출력을 수행한다.


(1) 버퍼 기반 입력 함수, fread()
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
파일 포인터에 size만큼의 데이터를 nmemb에서 지정한 개수만큼 읽어 ptr에 저장한다.
성공적으로 수행하면 읽어온 항목수를 리턴하고 읽을 항목이 없으면 0을, 파일의 끝을 만나면 EOF를 return함.

[buf 마지막을 \0으로 하지 않을 경우, 문자열의 끝을 인식하지 못하기에 이전에 썼던 내용이 삽입됨]
#############################################################################
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <stdio.h>

int main() {

    FILE *rfp;

    char buf[5];
    int n;

    rfp = fopen("hi.txt", "r");
    while((n = fread(buf, 1, 4, rfp)) > 0){
        buf[n] = '\0';
        printf("byte:%d\nstr:%s\n\n", n, buf);

    }

    printf("--------------------------------\n");
    
    rfp = fopen("hi.txt", "r");
    while((n = fread(buf, 1, 4, rfp)) > 0){
        //buf[n] = '\0';
        printf("byte:%d\nstr:%s\n\n", n, buf);
    }



}
[root@localhost ~]# cat hi.txt 
12341
12342
12343
[root@localhost ~]# ./a.out 
byte:4
str:1234

byte:4
str:1
12

byte:4
str:342


byte:4
str:1234

byte:2
str:3


--------------------------------
byte:4
str:1234

byte:4
str:1
12

byte:4
str:342


byte:4
str:1234

byte:2
str:3
34

[root@localhost ~]# 
#############################################################################




(2) 버퍼 기반 출력 함수, fwirte()
size_t fwirte(const void *ptr, size_t size, size_t nmemb, FILE *stream)
ptr이 가지고 있는 값을 size * nmemb만큼 읽어들여 stream에 저장
#############################################################################
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <stdio.h>

int main() {

    FILE *rfp;
    FILE *wfp;

    char buf[5];
    int n;

    rfp = fopen("hi.txt", "r");
    wfp = fopen("bye.txt", "w");
    
    while((n = fread(buf, 1, 4, rfp)) > 0){
        buf[n] = '\0';
        fwrite(buf, sizeof(char)*1, n, wfp);

    }
  
}
[root@localhost ~]# cat hi.txt 
12341
12342
12343
[root@localhost ~]# cat bye.txt 
[root@localhost ~]# ./a.out 
[root@localhost ~]# cat bye.txt 
12341
12342
12343
[root@localhost ~]# 
#############################################################################








5. 형식 기반 입출력
fgets()와 같은 함수는 문자열 형식을 고려하지 않고 한 행씩 읽어옴 -> 한칸씩 띄어진 것을 기준으로 해당 값을 가지고 오지는 못함



(1) fscanf(), fprintf()
fscanf 함수는 C 언어에서 파일에서 데이터를 읽어 변수에 저장하는 함수이다.
fscanf 함수는 형식화된 입력을 수행하여 파일로부터 데이터를 읽어와서 변수에 저장함

파일의 내용을 정해진 형식에 맞춰 읽어온다. 입력값이 형식에 맞지 않거나 너무 빨리 파일의 끝에 도달하면 0을 리턴한다.
파일의 끝을 만나면 EOF를 return함

fscanf 함수에서 형식 지정 문자열(format)은 파일에서 읽어들일 데이터의 형식을 지정함. 
fscanf 함수는 형식 지정 문자열에서 공백(스페이스, 탭, 개행 등)을 사용하여 데이터를 나누어 읽음

#############################################################################
#include <stdio.h>
#include <stdlib.h>

int main() {
    int id, a, b, c;
    FILE *rfp, *wfp;

    rfp = fopen("hi.txt", "r");
    wfp = fopen("bye.txt", "w"); 

    printf("학번    평균\n");
   
    while(fscanf(rfp, "%d %d %d %d", &id, &a, &b, &c) != EOF){
         printf("%d : %d\n", id, (a + b + c) / 3);
         fprintf(wfp, "%d : %d\n", id, (a + b + c) / 3);
    }

    fclose(rfp);
    fclose(wfp);

}
[root@localhost ~]# cat hi.txt 
202201 70 69 30
202202 32 23 42
202203 52 23 10
[root@localhost ~]# ./a.out 
학번    평균
202201 : 56
202202 : 32
202203 : 28
[root@localhost ~]# cat bye.txt 
202201 : 56
202202 : 32
202203 : 28
#############################################################################




6. 파일 오프셋 지정
저수준에서는 lseek()이다.


(1) 파일 오프셋 이동, fseek()
int fseek(FILE *stream, long offset, int whence);
steam: 파일 포인터
offset: 이동할 오프셋
whence: 오프셋의 기준 위치

whence에 사용할 수 있는 값
SEEK_SET: 파일의 시작 기준으로 계산
SEEK_CUR: 현재 위치를 기준으로 계산
SEEK_END: 파일의 끝을 기준으로 계산


(2) 현재 오프셋 구하기, ftell()
long ftell(FILE *stream)
lseek() 함수는 성공하면 오프셋을 return하지만 fseek() 함수는 성공하면 0, 실패하면 EOF를 리턴함
그렇기에 고수준에서는 ftell()을 이용하여 값을 구함



(3) 처음 위치로 오프셋 이동, rewind()
void rewind(FILE *stream);
위 함수는 오프셋 위치를 파일의 시작으로 즉시 이동시킨다.

########################################################################
#include<stdio.h>
#include <stdlib.h>
int main(){
    FILE *ftr;
    int end;
    ftr = fopen("hi.txt", "r");

    printf("초기 offset: %d\n", ftell(ftr));
    //0
  
    fseek(ftr,0, SEEK_END);

    end = ftell(ftr);
    printf("파일 끝 offset: %d\n", end);
    //12

    char *buf = (char *) malloc(end);
    rewind(ftr);
    printf("rewind 후: %d\n", ftell(ftr));
    //0
    
    fread(buf, 1, end, ftr);
    printf("%s", buf);

}
[root@localhost test]# cat hi.txt 
12345
67890
[root@localhost test]# ./a.out 
초기 offset: 0
파일 끝 offset: 12
rewind 후: 0
12345
67890
########################################################################




7. 파일 포인터 생성
저수준 파일 입출력에서는 열린 파일을 가리킬 때 파일 기술자를 사용하고, 고수준에서는 파일 포인터를 사용한다.

