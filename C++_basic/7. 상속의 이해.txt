[7. 상속의 이해]
상속이란 다른 클래스의 정보를 특정 클래스로 물려주는 것이다.
즉 A 클래스가 B클래스를 상속받게 되면 A 클래스는 B 클래스의 모든 멤버를 물려 받는다.

*기존 내가 잘못알고 있었던 것
자식 클래스 객체를 생성하면 자식 클래스, 부모 클래스 인스턴스 2개가 생성된다 -> 삡!~~ 틀렸다
-> 
정답은 자식클래스 객체를 생성하면 자식 클래스 인스턴스 한 개만 생성된다.
부모로부터 받은 멤버로 그대로 자식 클래스 인스턴스가 생성되는 것이다.

[상속의 문법]
###############################
class Student : public Person {

}
###############################

##############################################################
#include<iostream>

class Person {

public:
	int publicAge;

	Person(int age) : privateAge(age) {
		std::cout << "Person int 생성자\n";
	}


	Person(){
		std::cout << "Person default 생성자\n";
	}


	void showInfo() {
		std::cout << this->privateAge << " Person의 privateAge 값\n";
	}

private:
	int privateAge;


};

class Student : public Person {

public:

	Student(){
		std::cout << "student default 생성자\n";

	}
	Student(int age, int grade) : Person(age), grade(grade){
		std::cout << "student int 생성자\n";

	}

	 int grade;

};

int main() {
	Student s1;
	//Person default 생성자
	//student default 생성자
	
	Student s2(20, 5);
	//Person int 생성자
	//student int 생성자

	s2.showInfo();
	//20 Person의 privateAge 값

	std::cout << "-------------------------------------\n";

	Person* p1 = new Student();
	//p1->grade = student 멤버에 대한 20 접근이 불가
	//Person int 생성자
	//student int 생성자

	std::cout << sizeof(p1);
	//히지만 student, person 클래스의 멤버변수 만큼 메모리를 할당 받음
	//8

	//Student* s3 = new Person(); 에러

	/*
	Stduent 소멸자
	Person 소멸자
	Stduent 소멸자
	Person 소멸자
	*/
	
	

}
##############################################################


1) 자식 클래스 객체의 구성 (Student)
#Student 객체의 구성
1. Student 자식 멤버
2. Univ 부모 멤버
-> Student 객체안에 Univ 부모의 멤버를 상속받아 부모의 멤버를 호출할 수 있게 된다.

2) 생성자 호출
자식 클래스로 객체를 만들 때 무조건 멤버 이니셔라이즈를 통한 부모 생성자가 호출된다. (명시를 안하면 default 생성자 호출)
그리고 만약에 부모 클래스의 멤버변수를 초기화하고 싶다면 생성자의 멤버 이니셔라이즈를 커스터마이징하면 된다.
(직접 호출도 가능)
->
자식 클래스의 생성자가 호출이 되면 컴파일러는 자동적으로 부모 생성자를 호출한다. (아래와 같이)
위 예제에도 아래와 똑같은 결과를 확인할 수 있다.
---------------------------------------------------------------
Student(){
}
->
Student() : Person(){
}
---------------------------------------------------------------

#생성자 호출 순서는 아래와 같다.
1. 부모클래스 생성자 호출
2. 자식 생성자 생성자 호출

3) 소멸자 호출 순서
1. 자식 소멸자 호출
2. 부모 소멸자 호출 

4) 부모의 private 멤버변수의 상속
결론부터 말하자면 자식은 부모의 private 멤버도 상속 받는다. (모든 멤버를 상속받음)
마찬가지로 private 값을 불러오기위해서는 public 메소드를 통해 값을 불러오면 된다.




1. 상속의 멤버변수 접근제어자 proctected, private VS protected
procteced 멤버를 상속받은 자식 클래스는 해당 멤버에 접근이 가능하다.
<-> 
private는 오직 자신의 클래스에서만 접근이 가능함
(더 자세한 내용은 아래에)
##############################################################
#include<iostream>

class Person {
private:
	int privateAge;

protected:
	int protectedAge;

};

class Student : public Person {
public:

	void showInfo() {
		//std::cout << this->privateAge; 에러
		std::cout << this->protectedAge;

	}
};




int main() {
	Student s1;
	s1.showInfo();
}
##############################################################









2. 상속 시 접근제어자의 종류

아래의 코드에서 상속에서 "public"(접근제어자)의 의미를 살펴 보자
###############################
class Student : public Person {

}
###############################

*접근의 허용범위 순위
public > proctected > private

*상속 접근 제어자의 의미
정의한 접근 제어자와 같거나 큰 경우, 해당 접근제어자로 상속한다.

* 부모의 private 멤버는 상속되지 않는다! (당연한 얘기) -> pivate는 자기 자신의 클래스 내!에서만 사용가능하니깐
즉, public, procteced만 상속됨
->
정말~~ 정확하게 말하자면 상속은 된다. 자식에게도 부모의 private 멤버를 상속받는다. 하지만 자식 객체에서 접근하지 못한다.
그렇기에 엄밀히 말하면 상속되지만 접근할 수 없기에 그냥 헷갈리지 않게 상속되지 않는다고 표현하겠다.




1) private 접근 제어자 상속
부모 멤버가 private보다 넓은(procteced, public) 것은 private로 변경되어 상속됨
(부모 private는 상속되지 않음 -> 당연)

[아래 주석과 같이 proctected 혹은 public은 private로 상속되어 사용됨]
--------------------------------------------------------------------------------------------------------
#include<iostream>

class Person {

public: 
	int publicAge = 10;

private:
	int privateAge = 20;

protected:
	int protectedAge = 30;

};

class Student : private Person {

	/*

	접근불가:
		int private = 20;
	private:
		int publicAge = 10;
		int protectedAge = 30;

	*/

};
--------------------------------------------------------------------------------------------------------




2) procteced
[아래 주석과 같이 proctected 혹은 public은 proctected로 상속되어 사용됨]
--------------------------------------------------------------------------------------------------------
#include<iostream>

class Person {

public: 
	int publicAge = 10;

private:
	int privateAge = 20;

protected:
	int protectedAge = 30;

};

class Student : private Person {

	/*

	접근불가:
		int private = 20;
	procteced:
		int publicAge = 10;
		int protectedAge = 30;

	*/

};
--------------------------------------------------------------------------------------------------------



.

3) public
이것도 마찬가지로 public과 같거나 더 많은 권한을 가진 접근제어가 public으로 변경되어 사용됨
-> public이 최고로 높으니 변경되는 게 없다 -> proteced와 public이 그대로 상속됨
--------------------------------------------------------------------------------------------------------
#include<iostream>

class Person {

public: 
	int publicAge = 10;

private:
	int privateAge = 20;

protected:
	int protectedAge = 30;

};

class Student : private Person {

	/*

	접근불가:
		int private = 20;
	public:
		int publicAge = 10;
	protected:
		int protectedAge = 30;
	*/

};
--------------------------------------------------------------------------------------------------------










