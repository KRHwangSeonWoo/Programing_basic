[상속과 다형성]

(1) 상속

1) 상속은 A 클래스가 B 클래스의 멤버 변수와 메소드를 사용할 수 있도록 할 수 있다. (다중 상속 불가)

***인스턴스 생성 시 메모리할당***
부모 클래스가 먼저 메모리가 할당이 되고, 자식 클래스가 메모리 할당이 된다.
인스턴스 생성 시 따로 따로 할당이 된다는 것이다.

자식 생성자로 인스턴스를 만들고  자식의 자료형으로 받을 때 순서는 아래와 같음.
1. 자식 생성자 실행 -> 부모 생성자 실행(부모 인스턴스 생성) -> 자식 생성자 실행(자식 인스턴스 생성)
2. 자식 인스턴스와 부모 인스턴스 메모리 주소를 자식자료형으로 객체가 생성됨
3. 자식 클래스는 부모 클래스를 상속 중이기에 자식(자신)은 당연하고, 부모 인스턴스도 사용이 가능함.

A	<-	B	<-	C
자식      (상속)	부모	(상속)	조상

#############################################################################################################################
package inheritance;

public class Human_1 {
	
	String name;
	
	public void walk() {
		System.out.println("두발로 걷는다.");
	}

	
	private void eat() {
		System.out.println("밥을 먹는다.");
	}

	
	
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package inheritance;

public class Man_1 extends Human_1{
	
	
	public static void main(String[] args) {
		
		Man_1 man1 = new Man_1();
		man1.walk();
		
		man1.name = "Hwang";
		System.out.println(man1.name);
		//결과 값 : Hwang
		
		//man1.eat();
		//에러 발생 -> eat()은 private로 사용이 불가능함, 이를 해결하기 위해 eat()을 protected 이상으로 변경해야 함.
	}
	

}
#############################################################################################################################

2) 상속에서의 클래스 생성과 형 변환
상속 관계에서 클래스(인스턴스)를 생성할 때 부모 클래스의 생성자가 먼저 호출이 되고, 그리고 자식 생성자가 호출이 된다.
#############################################################################################################################
package inheritance;

public class Human_1 {
	
	String name;
	
	public Human_1() {
		System.out.println("Human_1 생성자 호출");
	}
	
	public void walk() {
		System.out.println("두발로 걷는다.");
	}

	
	private void eat() {
		System.out.println("밥을 먹는다.");
	}

	
	
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package inheritance;

public class Man_1 extends Human_1{
	
	public Man_1() {
		System.out.println("Man_1 생성자 호출");
	}
	
	
	public static void main(String[] args) {
		
		Man_1 man1 = new Man_1();
		//결과 값 : 
		//Human_1 생성자 호출
		//Man_1 생성자 호출

	}
	

}
#############################################################################################################################

3) 상속 관계에서의 super
super 예약어는 부모 클래스를 부르는 예약어임.
위 예제에서는 보이지 않지만 자식 생성자에는 super();이 숨어 있음.
super(); 예약어로 부모 클래스의 생성자를 불러옴.
#############################################################################################################################
package inheritance;

public class Human_1 {
	
	String name;
	
	public Human_1 (String name) {
		this.name = name;
		
	}

	
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package inheritance;

public class Man_1 extends Human_1{
	
	public Man_1(String name) {
		//super 함수를 정하지 않으면 super(); 형태, 즉 default로 생성이 되기에 에러가 발생함.
		//그렇기에 아래와 같인 인자값을 똑같이 설정하여야 함.
		super(name);
	}
	
	
	public static void main(String[] args) {
		
		Man_1 man1 = new Man_1("hwang");
		System.out.println(man1.name);
		//결과 값 : 
		//hwang

	}
	

}
#############################################################################################################################

#############################################################################################################################
package inheritance;

public class Human_1 {
	
	String name;
	
	public Human_1 (String name) {
		this.name = name;
		
	}
	
	public void walk() {
		System.out.println("사람은 두발로 걷는다.");
	}

	
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package inheritance;

public class Man_1 extends Human_1{
	
	public Man_1(String name) {
		super(name);
	}
	
	public void walk() {
		System.out.println("남자는 두발로 걷는다.");
	}
	
	public void walk_human() {
	super.walk();
	}
	
	
	public static void main(String[] args) {
		
		Man_1 man1 = new Man_1("hwang");
		man1.walk_human();
		//사람은 두발로 걷는다.
	
	}
	

}
#############################################################################################################################

4) 묵시적 형변환
부모 클래스 변수명 = new 자식 클래스(); ->  O
자식 클래스 변수명 = new 부모 클래스(); ->  X  -> 안됨.
부모 클래스가 인스턴스를 생성할 때 자식클래스의 클래스 정보를 알 수 없기에 오류가 남.
#############################################################################################################################
package inheritance;
	
public class Human_1 {
		
	String name;
		
	public void humanMethod() {
	System.out.println("남자");
		}
	}
	
		
	

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package inheritance;

public class Man_1 extends Human_1{
	
	String name;
	
	public void manMethod() {
		System.out.println("남자");
	}

	
	
	public static void main(String[] args) {
		
		Human_1 man1 = new Man_1();
		man1.humanMethod();
		//사람
		
		//man1.manMethod();
		//에러

	
	}
	

}
#############################################################################################################################

묵시적 형변환을 사용할 때 조심해야 할 점!

1. 자료형(부모 클래스)에 정의되지 않으면 사용 불가! (단 상속 관계 상 중복된 메소드가 있으면 인스턴스(생성자)가 먼저임. -> 가상메소드)
2. 멤버 변수를 이용하고 싶은 경우 부모에 정의하고, 자식의 정의하지 않던가 아님 생성자를 만들 때 super를 이용해서 부모 클래스의 멤버 변수를 초기화하자! 
#############################################################################################################################
	package inheritance;
	
	public class Human_1 {
		
		String name;
		
		public void humanMethod() {
			System.out.println("humanMethod_사람");
		}
	}
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package inheritance;
public class Man_1 extends Human_1{
	
	//만약에 String name을 주석처리하면 null이 아닌 hwang이 출력됨.
	//자세한 설명은 아래 public Man_1()에 적겠음.
	String name;
	
	
	public Man_1() {

		//이 때 중요한 것을 클래스 별!!!로 메모리가 할당 된다는 것임.
		//부모 생성자로 먼저 메모리(인스턴스)가 생성이 되고, 자식 생성자로 메모리(인스턴스)가 생성이 됨. 즉 따로 따로 생성이 된다는 것임.
		//(중복된 멤버 변수도 따로 따로 생성됨 -> 메소드와는 다름, 자식 인스턴스로 생성 시 기본적으로 자식으로 메소드만 내뱉음)
		
		//!!정리!!
		//자식 a() = new 자식생성자(); -> a는 자식형이므로 자식, 부모 생성자에 의해 생성된 인스턴스 모두 참조가능
		//부모 b() = new 자식생성자(); -> b는 부모형이므로 부모 생성자에 의해 생성된 인스턴스만 참조 가능, 즉 super에 의해 생성된 인스턴스를 의미
		//아래 코드를 보면 this를 사용함 -> 아래 this.name에 커서를 올리면 "String inheritance.Man_1.name"이 뜸.
		//즉 해당 this는 자식의 인스턴스를 주소를 가르킴.
		//그렇기에 부모형으로 받으면 null이 return되는 것임.
		
		//만약에 String name을 주석 처리하고 아래 this.name에 커서를 올리면 "String inheritance.Human_1.name"이라고 뜸.
		//즉 부모 인스턴스에 값을 넣는 것임 (부모 인스턴스 주소를 가르킴)
		//그렇기에 값을 넣으면 hwang으로 출력되는 것임

		//또한 위에 String name을 주석하고 this.name에 커서를 올리면 "String inheritance.Human_1.name"인 상태에서
		//Man_1 man3 = new Man_1(); 생성하고 name을 출력해도 hwang이 출력됨.
		//인스턴스는 Human으로 생성이되고 자료형은 Man이지만 즉 메모리 적제 위치가 Man과는 다르지만 현재 Man_1은 Human_1을 상속하고 있다.
		//그렇기에 Man() 생성자가 실행이되고(super도 실행), Man의 자료형으로 객체를 생성했을 때
		//이 Man 자료형 객체는 Human과 Man 둘다 인스턴스를 참조할 수 있게 되어 hwang이 출력된다. (Human_1을 상속하고 있기에)

		this.name = "hwang";

	
	}
	
	public Man_1(String name) {
		//아니면 아래와 같이 Human_1(부모)의 name으로 지정할 수 있음. 
		//이 생성자로 만든 인스턴스의 name은 "hwang"임
		super.name = name;
	}
	
	
	
	public void humanMethod() {
		System.out.println("humanMethod_남자");
	}

	public void man() {
		System.out.println("man");
	}
	
	
	public static void main(String[] args) {
		
		
		Human_1 man1 = new Man_1();
		man1.humanMethod();
		//humanMethod_남자 -> 중복된 메소드가 있으면 인스턴스(생성자)가 먼저임.
		
		//man1.man();
		//에러 발생 -> Human_1에는 없는 함수이기 때문에
		
		System.out.println(man1.name);
		//null

		Human_1 man2 = new Man_1("hwang");
		System.out.println(man2.name);
		//hwang

		Man_1 man3 = new Man_1();
		System.out.println(man3.name);
		//hwang
	}
	

}
#############################################################################################################################

5) 메서드 오버라이딩
상위 클래스(부모 등..)에서 정의한 메서드가 하위 클래스에서 구현 내용과 맞지 않을 경우 하위 클래스에서 해당 메소드를 "재정의"할 수 있음. -> 변수 오버라이딩은 없음
오버라이딩을 하기 위해서는 반환형 메서드 이름, 매개 변수가 같아야 함.
"재정의"하기에 자식에서 Override를 사용하고 자식의 생성자로 인스턴스를 생성한다면 Override한 메소드가 사용이됨. 묵시적 형변환도 마찬가지임.
(멤버 변수는 Override가 안됨)

툴에서 오버라이딩을 편하게 설정해주는 기능
Source -> Override/Implement Methods..

1. 상위 클래스에서의 메서드 오버라이딩
#############################################################################################################################
package inheritance;

public class MethodOver {
	
	String name;
	
	public void getMethod() {
		System.out.println("MethodOver");
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
package inheritance;

public class MethodOver2 extends MethodOver {
	
	
	@Override
	public void getMethod() {
		System.out.println("MethodOver2");
	}

	
	
	public static void main(String[] args) {
		
		MethodOver2 ins2 = new MethodOver2();		
		ins2.getMethod();
		
		MethodOver ins1= new MethodOver2();
		ins1.getMethod();
		
		
	}

}
#############################################################################################################################

(2) 다형성
다형성은 보통 인터페이스나 추상 클래스로 구현이 된다. 객체 지향에서 중요한 내용이니 알아 놓도록 하자.
쉽게 말해 같은 코드에서 여러 실행 결과가 나오는 것을 말함.
#############################################################################################################################
package inheritance;

public class Animal_3 {
	
	public void move() {
		System.out.println("움직입니다.");
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
package inheritance;

public class Cat_3 extends Animal_3{
	@Override
	public void move() {
		System.out.println("네 발로 움직입니다.");
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
package inheritance;

public class Man_3 extends Human_3 {
	
	public void move() {
		System.out.println("남자가 두발로 움직입니다.");
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
package inheritance;

public class Human_3 extends Animal_3{
	
	@Override
	public void move() {
		System.out.println("두발로 움직입니다.");

	}
	
	public static void main(String[] args) {
		
		
		
		Animal_3 human = new Human_3();
		human.move();
		//두발로 움직입니다.
		
		Animal_3 cat = new Cat_3();
		cat.move();
		//네발로 움직입니다.
		
		Human_3 man = new Man_3();
		man.move();
		//남자가 두발로 움직입니다.
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
